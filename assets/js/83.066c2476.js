(window.webpackJsonp=window.webpackJsonp||[]).push([[83],{374:function(t,s,n){"use strict";n.r(s);var e=n(28),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"this与this-super"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#this与this-super"}},[t._v("#")]),t._v(" this与this super")]),t._v(" "),n("div",{staticClass:"post",attrs:{id:"post-41886"}},[n("h1",{staticClass:"storytitle"},[t._v("函数中的‘this’和‘this super’参数")])]),t._v(" "),n("div",{staticClass:"storycontent"},[n("p",[t._v(" JavaScript和TIScript中的每个函数都有一个隐含的"),n("code",[t._v("this")]),t._v("参数。")]),t._v(" "),n("p",[t._v(" 所以当你调用一个对象的方法时，比如"),n("code",[t._v(" foo.bar(1) ")]),t._v("方法，"),n("code",[t._v(" foo ")]),t._v("对象会命名为this来作为函数的第一个参数来传递给"),n("code",[t._v(" bar(param) ")]),t._v("函数。")]),t._v(" "),n("p",[t._v(" 对于使用过JS, Python, Ruby等语言的人来说，‘this’变量应该是很熟悉的。 ")]),t._v(" "),n("p",[t._v(" 但是当一个内部函数想访问它外部函数的‘this’值时，你该怎么做呢? 在JavaScript中，唯一的办法是定义一个变量，并且将外部函数的 ‘this’赋值给它: "),n("code",[t._v(" var that = this; ")]),t._v(" 。 ")]),t._v(" "),n("p",[t._v(" 为了处理这种情况，我在TIScript中引入了“super this”概念, 所以在任何一个函数中，都有以下几个隐含变量: ")]),t._v(" "),n("ul",[n("li",[n("code",[t._v(" this ")]),t._v(" – 标准的this变量; ")]),t._v(" "),n("li",[n("code",[t._v(" this super ")]),t._v(" – 外部函数的标准this变量; ")]),t._v(" "),n("li",[n("code",[t._v(" this super super ")]),t._v(" – 外部函数的外部函数的this变量; ")]),t._v(" "),n("li",[t._v(" 以此类推。")])]),t._v(" "),n("p",[t._v(" 下面的示例，将在标准输出上输出“6”: ")]),t._v(" "),n("pre",{staticStyle:{"background-color":"#FEFCF6"}},[t._v("    class Test { \n      function this(data) { \n        "),n("span",{staticStyle:{color:"green"}},[t._v("// 构造器")]),t._v("  \n        this.data = data; \n        "),n("span",{staticStyle:{color:"green"}},[t._v("// 实例字段")]),t._v(" \n      } \n      function Outer(arg1) { \n        "),n("span",{staticStyle:{color:"green"}},[t._v("// this - 隐藏参数, 局部变量")]),t._v(" \n        "),n("span",{staticStyle:{color:"green"}},[t._v("// arg1 - 参数, 局部变量")]),t._v("  \n        function Inner(arg2) { \n          "),n("span",{staticStyle:{color:"green"}},[t._v("// this - 隐藏参数, 局部变量")]),t._v("   \n          "),n("span",{staticStyle:{color:"green"}},[t._v("// arg2 - 参数, 局部变量")]),t._v("   \n          "),n("span",{staticStyle:{color:"green"}},[t._v("// arg1 - 外部变量 - 外部参数")]),t._v("  \n          "),n("span",{staticStyle:{color:"green"}},[t._v("// this super - 外部变量 - 外部的'this'参数")]),t._v("  \n          return (this super).data "),n("span",{staticStyle:{color:"green"}},[t._v("// 1")]),t._v("  \n            + arg1 "),n("span",{staticStyle:{color:"green"}},[t._v("// 2")]),t._v("  \n            + arg2 "),n("span",{staticStyle:{color:"green"}},[t._v("// 3")]),t._v("  \n        } \n        return Inner; \n      } \n    } \n    var test = new Test(1); \n    var innerFunc = test.Outer(2);\n    stdout.println( innerFunc(3) );\n    ")])])])}),[],!1,null,null,null);s.default=r.exports}}]);