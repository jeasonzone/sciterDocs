(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{351:function(t,e,s){"use strict";s.r(e);var r=s(28),v=Object(r.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"tiscript语法兼容css"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tiscript语法兼容css"}},[t._v("#")]),t._v(" TIScript语法兼容CSS")]),t._v(" "),s("div",{staticClass:"post",attrs:{id:"post-41748"}},[s("h1",{staticClass:"storytitle"},[t._v("使TIScript语法兼容CSS")])]),t._v(" "),s("div",{staticClass:"storycontent"},[s("p",[t._v("一次又一次地当我需要在脚本中定义一些CSS时，我感觉到我自己不是很舒服的。 – CSS和JavaScript/TIScript使用不同的语法。 ")]),t._v(" "),s("p",[t._v("考虑下JavaScript中的这样的代码:")]),t._v(" "),s("pre",{staticClass:"brush: js;"},[s("code",[t._v('\n  function switchState() \n  {\n    element.style.backgroundColor = "rgb(126,0,0)";\n    element.style.transform = "rotate(45deg) translate(10px,10px)";\n  }\n')])]),t._v(" "),s("p",[t._v("这样的代码不是很美观，而且解析起来也不是很有效。")]),t._v(" "),s("p",[t._v("而且，如果你想从样式中获取当前的旋转角度, 然后对它增加一些值，然后再回写它，则你需要先解析这个样式值中的CSS规则，计算后又转换成字符串设置回去。")]),t._v(" "),s("p",[t._v("我已经研究过许多JS框架是如何与CSS协同工作 – 在它们的代码里大部分是在解析CSS代码。")]),t._v(" "),s("p",[t._v("然而浏览器已经解析过CSS，并且已经创建好了内部数据结构用于展示CSS值。 这样的代码以及在这里了，为什么我们不复用它们? ")]),t._v(" "),s("p",[t._v("处理这个问题的方法之一是将CSS内部数据使用所谓的"),s("a",{attrs:{href:"http://dev.w3.org/csswg/cssom/",title:"CSSOM spec",target:"_blank"}},[t._v("CSSOM")]),t._v("模型暴露出来。但是这是需要很多工作量，而且结果依然不是很简洁。")]),t._v(" "),s("p",[t._v("理想的方式应该是这样的:")]),t._v(" "),s("pre",{staticClass:"brush: js;"},[s("code",[t._v("\n  function switchState() \n  {\n    element.style.set {\n      background-color: rgb(126,0,0),\n      transform: rotate(45deg) translate(10px,10px) \n    }\n  }\n")])]),t._v(" "),s("p",[t._v("而且原则上，JS语法可以扩展支持这样的创建方式，而且不会与已存在的代码冲突:")]),t._v(" "),s("ol",[s("li",[t._v("允许在对象的名称中使用-符号，比如"),s("code",[t._v("background-color")]),t._v("。")]),t._v(" "),s("li",[t._v("允许数值可以有类似"),s("code",[t._v("45deg")]),t._v("、"),s("code",[t._v("10px")]),t._v("这样的单位。这需要在JS中添加新的数据类型，不过这对他们来说是得心应手的。")]),t._v(" "),s("li",[t._v('为语言添加所谓的"标签元组"。在CSS中，'),s("code",[t._v("rotate(45deg)")]),t._v("不是一个函数调用，而是一个元组(有名称的数据结构)。在TIScript中它可以写成"),s("code",[t._v("[rotate:45deg]")]),t._v(" – 一个包含‘rotate’标签的元素元组。")]),t._v(" "),s("li",[t._v("使空白符成为一个有效的列表分隔符，最起码在对象声明中, 所以下面的代码：\n"),s("pre",{staticClass:"brush: js;"},[s("code",[t._v("\n   { transform: rotate(45deg) translate(10px,10px) }\n")])]),t._v(" "),s("p",[t._v("将等价于:  ")]),t._v(" "),s("pre",{staticClass:"brush: js;"},[s("code",[t._v("\n   { transform:[rotate(45deg), translate(10px,10px)] }\n")])]),t._v(" "),s("p",[t._v("这样写是不是非常棒？")])])]),t._v(" "),s("p",[t._v("实际上，CSS语法(有时候看起来可能非常乱)确实是使用两种类型的列表和一个tuple<2> (优先顺序):")]),t._v(" "),s("ol",[s("li",[t._v("逗号分隔的列表: "),s("code",[t._v("background: url(1.png),url(2.png);")])]),t._v(" "),s("li",[t._v("空白符分隔的类别: "),s("code",[t._v("background: no-repeat url(1.png);")])]),t._v(" "),s("li",[t._v("对-元组: "),s("code",[t._v('font: 12pt 10pt/14pt "arial";')])])]),t._v(" "),s("p",[t._v("不过，这些都是下一阶段要做的事，目前我将尝试为值添加单位，以及空白符分隔的列表...")])])])}),[],!1,null,null,null);e.default=v.exports}}]);