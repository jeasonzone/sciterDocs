(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{320:function(v,_,t){"use strict";t.r(_);var e=t(28),o=Object(e.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"csss-事件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#csss-事件"}},[v._v("#")]),v._v(" CSSS!事件")]),v._v(" "),t("h2",{attrs:{id:"csss-中dom元素的事件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#csss-中dom元素的事件"}},[v._v("#")]),v._v(" CSSS!中DOM元素的事件")]),v._v(" "),t("p",[v._v("CSSS!扩展了经典CSS，通过下面的这些事件属性，可以定义事件处理器:")]),v._v(" "),t("dl",[t("dt",[t("code",[v._v("hover-on!")])]),v._v(" "),t("dd",[v._v("若代码包含这个属性，则当元素获取:hover状态时调用这个属性，相当于MOUSE_ENTER事件;")]),v._v(" "),t("dt",[t("code",[v._v("hover-off!")])]),v._v(" "),t("dd",[v._v("相当于MOUSE_LEAVE事件;")]),v._v(" "),t("dt",[t("code",[v._v("active-on!")])]),v._v(" "),t("dd",[v._v("当元素获得:active状态时(如MOUSE_DOWN事件)时触发。\nis-on-icon()指示器函数可以在该事件处理器中使用。")]),v._v(" "),t("dt",[t("code",[v._v("active-off!")])]),v._v(" "),t("dd",[v._v("当元素失去:active状态时(如MOUSE_UP事件)时触发。\nis-on-icon()指示器函数可以在该事件处理器中使用。")]),v._v(" "),t("dt",[t("code",[v._v("focus-on!")])]),v._v(" "),t("dd",[v._v("当元素获取输入焦点时触发。")]),v._v(" "),t("dt",[t("code",[v._v("focus-off!")])]),v._v(" "),t("dd",[v._v("当元素失去输入焦点时触发。")]),v._v(" "),t("dt",[t("code",[v._v("key-on!")])]),v._v(" "),t("dd",[v._v("当元素接收到key-down事件时触发, key-code()函数获取按键信息。"),t("br"),v._v(" "),t("code",[v._v("key-code()")]),v._v("函数可以用于获取按键的值。如果需要可以使用按键代码常量来定义按键代码"),t("br"),v._v("\n\t示例: "),t("code",[v._v("key-code() == 'RETURN' ? self.ok = true;")])]),v._v(" "),t("dt",[t("code",[v._v("key-off!")])]),v._v(" "),t("dd",[v._v("当元素接收到key-up事件时触发。使用key-code()函数可以获取按键的值;")]),v._v(" "),t("dt",[t("code",[v._v("click!")])]),v._v(" "),t("dd",[v._v("当元素接收到 BUTTON_CLICK、HYPERLINK_CLICK等事件时触发。注意: 只有拥有button、hyperlink、clickable行为的元素才可以接收到这个事件。")]),v._v(" "),t("dt",[t("code",[v._v("assigned!")])]),v._v(" "),t("dd",[v._v("当元素设置这个样式时被触发，或者说当assigned!属性值改变时触发。")]),v._v(" "),t("dt",[t("code",[v._v("value-changed!")])]),v._v(" "),t("dd",[v._v("当[input]的值被改变时触发，例如：EDIT_VALUE_CHANGED、BUTTON_STATE_CHANGED、SELECT_SELECTION_CHANGED将引起这个事件。")]),v._v(" "),t("dt",[t("code",[v._v("validate!")])]),v._v(" "),t("dd",[v._v("按常识来说这不是一个事件，而是behavior:form的一个辅助方法，用于在提交前校验输入元素。")]),v._v(" "),t("dt",[t("code",[v._v("timer!")])]),v._v(" "),t("dd",[v._v("用于定义在计时器事件中执行的代码。计时器的创建和销毁使用start-timer(ms)和stop-timer()方法。")]),v._v(" "),t("dt",[t("code",[v._v("animation-start!")])]),v._v(" "),t("dd",[v._v("在调用element.start-animation()方法后触发。")]),v._v(" "),t("dt",[t("code",[v._v("animation-end!")])]),v._v(" "),t("dd",[v._v("当动画结束时触发。")]),v._v(" "),t("dt",[t("code",[v._v("animation-step!")])]),v._v(" "),t("dd",[v._v("当每个动画步骤时触发。这个事件处理器应该返回一个整数——毫秒数——如果element.start-animation()调用没有指定动画时间时的下一步的延时时间。在animation-step!事件处理函数中可以使用morph()全局函数，这个函数可以有3个参数："),t("br"),v._v(" "),t("code",[v._v("res = "),t("strong",[v._v("morph")]),v._v('("ease-function-name", start-value, end-value )')]),v._v(" 产生的值取决于ease函数和内部的动画进度状态变量。下面是morph()支持的ease函数名称列表:")]),v._v(" "),t("ul",[t("ul",[t("li",[v._v('"quad-in", "quad-out", "quad-in-out", ')]),v._v(" "),t("li",[v._v('"cubic-in", "cubic-out", "cubic-in-out", ')]),v._v(" "),t("li",[v._v('"quart-in", "quart-out", "quart-in-out",')]),v._v(" "),t("li",[v._v('"quint-in", "quint-out", "quint-in-out", ')]),v._v(" "),t("li",[v._v('"sine-in", "sine-out", "sine-in-out", ')]),v._v(" "),t("li",[v._v('"expo-in", "expo-out", "expo-in-out", ')]),v._v(" "),t("li",[v._v('"circ-in", "circ-out", "circ-in-out", ')]),v._v(" "),t("li",[v._v('"elastic-in", "elastic-out", "elastic-in-out",')]),v._v(" "),t("li",[v._v('"back-in", "back-out", "back-in-out",')]),v._v(" "),t("li",[v._v('"bounce-in", "bounce-out", "bounce-in-out", ')])])]),v._v(" "),t("dt",[t("code",[v._v("size-changed!")])]),v._v(" "),t("dd",[v._v("当元素获得新尺寸时触发")])])])}),[],!1,null,null,null);_.default=o.exports}}]);