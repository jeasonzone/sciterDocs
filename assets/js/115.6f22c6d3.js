(window.webpackJsonp=window.webpackJsonp||[]).push([[115],{295:function(e,v,_){"use strict";_.r(v);var t=_(28),n=Object(t.a)({},(function(){var e=this,v=e.$createElement,_=e._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("h1",{attrs:{id:"plus库"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#plus库"}},[e._v("#")]),e._v(" plus库")]),e._v(" "),_("h2",{attrs:{id:"plus框架"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#plus框架"}},[e._v("#")]),e._v(" Plus框架")]),e._v(" "),_("p",[e._v("Plus框架的主要目的是提供一种数据绑定工具 —— 数据(模型)可以使用多种方式绑定到对应的HTML元素的展示上。")]),e._v(" "),_("h2",[e._v("模型声明——"),_("em",[e._v("model")]),e._v("属性")]),e._v(" "),_("p",[e._v("任何内部有展示数据(又名模型)的DOM容器元素都可以链接到某个名称空间(对象)上。这种管理使用model属性来指定: ")]),e._v(" "),_("pre",[_("code",[e._v('<body model="MyDataNamespace">\n   ... \n</body> \n')])]),e._v(" "),_("p",[e._v("这时，在你的脚本中应该下面的代码: ")]),e._v(" "),_("pre",[_("code",[e._v("namespace MyDataNamespace {\n   ...\n}\n")])]),e._v(" "),_("p",[e._v("这种情况下，则body元素的内容将会链接(绑定)到MyDataNamespace名称空间中的数据上。")]),e._v(" "),_("p",[e._v("有model属性的最顶层的元素被当做"),_("em",[e._v("数据模型视图")]),e._v(" - 反应模型数据名称空间/对象的状态。")]),e._v(" "),_("h2",[e._v("元素绑定(Bound)")]),e._v(" "),_("p",[e._v("元素的value值可以被绑定到模型的某些变量上。+plus框架使用"),_("em",[e._v("name")]),e._v("属性值进行绑定，其中"),_("em",[e._v("name")]),e._v("属性值可以是绑定的变量名或一个表达式。")]),e._v(" "),_("pre",[_("code",[e._v('<body model="Data"> \n  <p>Whom to greet: <input|text(greeting) /></p>\n  <p>Greeting: Hello <output(greeting) />!</p>\n</body>\n')])]),e._v(" "),_("p",[e._v("上面的两个元素都绑定了模型中的同一个"),_("code",[e._v("Data.greeting")]),e._v("变量。修改<input>元素的值将会自动反应到<output>元素上。")]),e._v(" "),_("p",[e._v("普通的数据变量直接绑定到关联元素的"),_("code",[e._v("value")]),e._v("属性上。但是如果元素(或它的行为类上)定义了"),_("code",[e._v("setBoundValue(newVal)")]),e._v("元素，则将调用该函数来设置绑定的数据。")]),e._v(" "),_("h2",[e._v("属性绑定(Bound)")]),e._v(" "),_("p",[e._v("Sciter也支持将元素的属性值绑定到变量或对象属性上。要定义绑定属性，仅需在需要绑定的属性名前加上'@'字符，然后在属性值中写入绑定的变量名或一个表达式: ")]),e._v(" "),_("pre",[_("code",[e._v('<li><picture @src="customer.image" /> <output(customer.name)/></li>\n')])]),e._v(" "),_("p",[e._v("上面的picture元素的"),_("code",[e._v("src")]),e._v("属性将绑定"),_("code",[e._v("customer.image")]),e._v("变量，并且output元素也绑定了"),_("code",[e._v("customer.name")]),e._v("变量。")]),e._v(" "),_("p",[e._v("下面这几个绑定属性将映射到state状态上:")]),e._v(" "),_("ul",[_("li",[_("code",[e._v('@enabled="表达式"')]),e._v(" - bool类型的表达式，绑定到element.state.disabled = !表达式;")]),e._v(" "),_("li",[_("code",[e._v('@disabled="表达式"')]),e._v(" - bool类型的表达式，绑定到element.state.disabled = 表达式;")]),e._v(" "),_("li",[_("code",[e._v('@readonly="表达式"')]),e._v(" - bool类型的表达式，绑定到element.state.readonly = 表达式;")]),e._v(" "),_("li",[_("code",[e._v('@expanded="表达式"')]),e._v(" - bool类型的表达式，绑定到element.state.expanded = 表达式;")]),e._v(" "),_("li",[_("code",[e._v('@collapsed="表达式"')]),e._v(" - bool类型的表达式，绑定到element.state.collapsed = 表达式;")])]),e._v(" "),_("h2",[e._v("可重复项(Repeatable)")]),e._v(" "),_("p",[e._v('任何容器元素可以有个each="'),_("em",[e._v("item")]),e._v(" in "),_("em",[e._v("items")]),e._v('"属性定义。这时容器内的元素将被当做模板代码，容器的内容的初始化将会遍历items集合，items中每一项都会根据模板克隆并填充数据。 '),_("em",[e._v("each")]),e._v("属性的格式如下:")]),e._v(" "),_("pre",[_("code",[e._v("[{index},]{item} "),_("strong",[e._v("in")]),e._v(" {items-表达式} [ "),_("strong",[e._v("|")]),e._v(" {filter-表达式}\n")])]),e._v(" "),_("p",[e._v("其中:")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("{item}")]),e._v(" - 任意名称，它代表repeatable节中当前项的变量名称;")]),e._v(" "),_("li",[_("code",[e._v("{index}")]),e._v(" - 可选, 当前项在items数组中的索引;")]),e._v(" "),_("li",[_("code",[e._v("{items-表达式}")]),e._v(" - 模型中的一个变量，或者是一个返回对象列表/数组的表达式")]),e._v(" "),_("li",[_("code",[e._v("{filter-表达式}")]),e._v(" - 可选, 应用到对象列表/数组上的过滤器。它可以是:")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("null")]),e._v(" (或省略) - 未设置过滤器, 所有元素都将被渲染;")]),e._v(" "),_("li",[_("code",[e._v("object")]),e._v(" (包括对象object字面值) - 仅渲染与这个对象的所有属性名和值均匹配的元素;")]),e._v(" "),_("li",[_("code",[e._v("function(item, index)")]),e._v(" - 为每个变量项将被调用的函数, 如果它返回"),_("em",[e._v("true")]),e._v("，则该项可以被渲染;")]),e._v(" "),_("li",[_("code",[e._v('"string"')]),e._v(" - 如果每个变量项中的任何字符串属性包含这个字符串，则该项可以被渲染。")])])]),e._v(" "),_("p",[e._v("示例：将myCustomers数组中的每一项作为ol的列表项进行渲染:")]),e._v(" "),_("pre",[_("code",[e._v('  <ol each="customer in myCustomers">\n      <li><picture @src="customer.image" /> <output(customer.name)/></li>\n  </ol>\n')])]),e._v(" "),_("h2",[e._v("在数据路径上观察变化")]),e._v(" "),_("p",[e._v("Plus定义了"),_("code",[e._v("@observing")]),e._v("装饰器换上，它可以用于在模型数据树上订阅事件函数。订阅的语法如下:")]),e._v(" "),_("pre",[_("code",[e._v('@observing "path" ["path2"[, ... "pathN" ]] \n  function(path) {\n  }')])]),e._v(" "),_("p",[e._v("其中，"),_("i",[e._v("path")]),e._v("是一个以"),_("code",[e._v(".")]),e._v("(点)和"),_("code",[e._v("[]")]),e._v("(如果元素路径是一个数组时)分隔的字符串。")]),e._v(" "),_("p",[e._v("这个函数被调用时，"),_("i",[e._v("this")]),e._v("被设置为路径最右端的对象或数组。")]),e._v(" "),_("p",[e._v("示例:")]),e._v(" "),_("pre",[_("code",[e._v('namespace Data \n{ \n   var items = [\n       { name:"Alan", state: true },\n       { name:"Winston", state: false }\n   ];\n   @oberving "items[].state" function() {\n      // items中某项的.state属性被改变\n      // \'this\'这里是item\n   }\n}')])]),e._v(" "),_("h2",[e._v("基本的事件绑定属性")]),e._v(" "),_("p",[e._v("元素可以包含一些事件属性，它们可以定义一个当对应事件发生时执行的函数。这个处理器函数被调用时，"),_("code",[e._v("this")]),e._v("变量被设置为对应的DOM元素。而第一个参数被设置为该DOM元素绑定的模型对象。")]),e._v(" "),_("p",[e._v('事件属性列表: "click", "dblclick", "change", "enter", "escape", "focusin", "focusout".')]),e._v(" "),_("p",[e._v("示例:")]),e._v(" "),_("pre",[_("code",[e._v('  <b click="items.removeByValue(item)">x</b>\n')])]),e._v(" "),_("p",[e._v("点击上面的"),_("code",[e._v("<b>")]),e._v("元素将会调用"),_("code",[e._v("items.removeByValue()")]),e._v("函数，并且将当前item对象作为它的第一参数。")]),e._v(" "),_("h2",[e._v("子-模型")]),e._v(" "),_("p",[e._v("主数据模型视图元素内部的元素也可以定义"),_("em",[e._v("model")]),e._v("属性 - 它们被称作子视图，看起来像数据树的一部分。")]),e._v(" "),_("pre",[_("code",[e._v('namespace MyDataNamespace\n{\n  var records = [ {name: "first", ...},'),_("br"),e._v('                  {name: "second", ...},\n                  {name: "third", ...} ];\n  var '),_("u",[e._v("currentRecord")]),e._v(" = {}; // 用于子模型;\n  // 设置当前记录的函数\n  function setCurrentRecord(index) { currentRecord = records[index]; }\n}\n")])]),e._v(" "),_("p",[e._v("通过子模型，我们可以在视图树，这些视图元素在当前模型(名称空间/对象)中查找绑定元素:")]),e._v(" "),_("pre",[_("code",[e._v('<body model="MyDataNamespace">\n   \x3c!-- records list --\x3e\n   <ol each="index,record in records">\n      <li><output(record.name) click="setCurrentRecord(index)" /></li>\n   </ol>\n   \x3c!-- current record view --\x3e\n   <section #record-details-view '),_("u",[e._v('model="currentRecord"')]),e._v(">\n      <input(name) />\n      ...\n   </section>\n</body>\n")])]),e._v(" "),_("p",[e._v("子视图元素观察[子]模型中的变量的修改, 因此当变量被改变时，所以观察元素都将重新绑定新的数据。")]),e._v(" "),_("p",[e._v("在上面的示例中，在列表中的"),_("em",[e._v("output(name)")]),e._v("元素上点击时，将会调用"),_("code",[e._v("setCurrentRecord()")]),e._v("函数，从而触发currentRecord被设置为一个新对象。参见demos/L-list-detail.htm示例。")])])}),[],!1,null,null,null);v.default=n.exports}}]);