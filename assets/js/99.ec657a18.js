(window.webpackJsonp=window.webpackJsonp||[]).push([[99],{334:function(t,v,_){"use strict";_.r(v);var o=_(28),e=Object(o.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"net-datasocket"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#net-datasocket"}},[t._v("#")]),t._v(" Net.DataSocket")]),t._v(" "),_("p",[t._v('DataSocket使用命名管道(windows)或TCP/IP协议Socket在相同机器("localhost"地址)或线连接的两个Sciter进程间进行双向数据交互。DataSocket支持服务端监听('),_("code",[t._v("DataSocket.listen()")]),t._v(")和客户端Socket("),_("code",[t._v("DataSocket.connect()")]),t._v(")。")]),t._v(" "),_("p",[t._v("DataSocket发送/接收的数据为序列化的二进制格式 - 通过"),_("code",[t._v("socket.send(data)")]),t._v("发送数据，以及通过"),_("code",[t._v('socket.on("receive", function(data) {})')]),t._v('在其他端接收数据。所以可能需要额外的"字符串化/解析"处理。')]),t._v(" "),_("dl",[_("h2",[t._v("属性")]),t._v(" "),_("h2",[t._v("方法")]),t._v(" "),_("dt",[t._v("connect")]),t._v(" "),_("dd",[_("p",[_("strong",[t._v("(")]),_("strong",[t._v("name")]),t._v(": string [, "),_("b",[t._v("port")]),t._v(": integer] "),_("strong",[t._v(")")]),t._v(" : DataSocket")]),t._v(" "),_("p",[t._v("客户端DataSocket的创建方法。返回一个新的处于连接状态的socket。如果指定了"),_("i",[t._v("port")]),t._v("参数，则"),_("i",[t._v("name")]),t._v("被认为是通过TCP/IP连接时的域名或地址，否则name被认为是命名管道的名称(或局域网socket)。")])]),t._v(" "),_("dt",[t._v("listen")]),t._v(" "),_("dd",[_("p",[_("strong",[t._v("( acceptor")]),t._v(": function, "),_("strong",[t._v("name")]),t._v(": string [, "),_("b",[t._v("port")]),t._v(": integer] "),_("strong",[t._v(")")]),t._v(" : DataSocket")]),t._v(" "),_("p",[t._v("服务端DataSocket的创建方法。返回一个新的处于监听状态的socket。如果指定了"),_("i",[t._v("port")]),t._v("参数，则"),_("i",[t._v("name")]),t._v("被认为是通过TCP/IP连接时的域名或地址。")]),t._v(" "),_("p",[_("em",[t._v("acceptor")]),t._v("函数在每个新连接请求到达服务端是调用。该函数的签名:")]),t._v(" "),_("pre",[_("code",[t._v("function acceptor( connectionSocket: DataSocket ) : true | false")])]),t._v(" "),_("p",[t._v("其中："),_("em",[t._v("connectionSocket")]),t._v("是用于与远程通信的另一个DataSocket示例。")]),t._v(" "),_("p",[t._v("若要接受和使用这个连接，你必须返回"),_("em",[t._v("true")]),t._v("。")])]),t._v(" "),_("dt",[t._v("on")]),t._v(" "),_("dd",[_("p",[_("strong",[t._v("( event")]),t._v(": string"),_("strong",[t._v(", callback")]),t._v(": function"),_("strong",[t._v(" )")]),t._v(" : this")]),t._v(" "),_("p",[t._v("将下面的Socket事件之一绑定到callback回调函数:")]),t._v(" "),_("ul",[_("li",[_("strong",[t._v('"connect"')]),t._v(" -> "),_("code",[t._v("function()")]),t._v(", socket连接到主机;")]),t._v(" "),_("li",[_("strong",[t._v('"data"')]),t._v(" -> "),_("code",[t._v("function(data:any)")]),t._v(", 已经接收到数据;")]),t._v(" "),_("li",[_("strong",[t._v('"sent"')]),t._v(" -> "),_("code",[t._v("function()")]),t._v(", 上一次"),_("code",[t._v("send()")]),t._v("操作完成;")]),t._v(" "),_("li",[_("strong",[t._v('"error"')]),t._v(" -> "),_("code",[t._v("function(err: Error)")]),t._v(", 发生错误, 错误对象会传递给该回调函数;")]),t._v(" "),_("li",[_("strong",[t._v('"close"')]),t._v(" -> "),_("code",[t._v("function()")]),t._v(", socket被关闭;")])]),t._v(" "),_("p",[t._v('这些事件名称可以包含".namespace"名称空间。它被用在.off()函数中。')])]),t._v(" "),_("dt",[t._v("off")]),t._v(" "),_("dd",[_("p",[_("strong",[t._v("( event")]),t._v(": string | "),_("strong",[t._v("callback")]),t._v(": function"),_("strong",[t._v(" )")]),t._v(" : this")]),t._v(" "),_("p",[t._v("根据事件名或回调函数来解除事件绑定。")]),t._v(" "),_("p",[t._v("事件名可以只包含名称空间部分。所以这样的代码"),_("code",[t._v('socket.off(".namespace")')]),t._v(" 将会解除所以设置了该名称空间的事件绑定。")])]),t._v(" "),_("dt",[t._v("send")]),t._v(" "),_("dd",[_("p",[_("strong",[t._v("( data")]),t._v(": any "),_("strong",[t._v(")")])]),t._v(" "),_("p",[t._v("该方法用于将数据发送到远程端。data可以为任何可序列化的数据类型(对象、数字、字符串、数组等)。")])]),t._v(" "),_("dt",[t._v("close")]),t._v(" "),_("dd",[_("p",[_("strong",[t._v("( )")])]),t._v(" "),_("p",[t._v("关闭socket。")])])])])}),[],!1,null,null,null);v.default=e.exports}}]);