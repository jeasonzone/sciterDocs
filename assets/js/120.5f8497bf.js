(window.webpackJsonp=window.webpackJsonp||[]).push([[120],{268:function(v,e,_){"use strict";_.r(e);var t=_(28),n=Object(t.a)({},(function(){var v=this,e=v.$createElement,_=v._self._c||e;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"函数"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#函数"}},[v._v("#")]),v._v(" 函数")]),v._v(" "),_("p",[v._v("TIScript֧支持命名和匿名(lambda)第一类函数。函数是Function类的对象。")]),v._v(" "),_("h2",[_("a",{attrs:{name:"named-functions",id:"named-functions"}},[v._v("命名函数")])]),v._v(" "),_("p",[v._v("命名函数使用下面的语句来声明:")]),v._v(" "),_("pre",{pre:!0,attrs:{class:"code tiscript"}},[_("code",[v._v("function <函数名> ( <参数> )\n{\n  //...函数体\n}\n")])]),v._v(" "),_("dl",[_("dt",[v._v("其中:")]),v._v(" "),_("dd",[_("em",[v._v("<函数名>")]),v._v("是一个函数的名称, 或者是:  "),_("br"),v._v("\n\t简单的"),_("em",[v._v("<nmtoken>")]),v._v(" , 或"),_("br"),v._v("组合名称: "),_("em",[v._v("<nmtoken1>")]),v._v(" [ "),_("code",[v._v(".")]),v._v(" "),_("em",[v._v("<nmtoken2>")]),v._v(" [ . "),_("em",[v._v("<nmtoken3>")]),v._v(" [ . "),_("em",[v._v("<nmtokenN>")]),v._v(" ]]] "),_("sup",[_("a",{staticClass:"fn_top",attrs:{href:"#fn__1",name:"fnt__1",id:"fnt__1"}},[v._v("1)")])]),_("br"),_("em",[v._v("<参数>")]),v._v("是一个函数参数列表:"),_("br"),v._v("\n\t["),_("em",[v._v("<参数名1>")]),v._v(" [ "),_("code",[v._v(",")]),v._v(" "),_("em",[v._v("<参数名2>")]),v._v(" [ "),_("code",[v._v(",")]),v._v(" ... "),_("em",[v._v("<参数名N>")]),v._v(" ]]]")])]),v._v(" "),_("h2",[_("a",{attrs:{name:"anonymous-functions",id:"anonymous-functions"}},[v._v("匿名函数")])]),v._v(" "),_("p",[v._v("匿名函数(又名lambda表达式)可以使用以下语句来声明:")]),v._v(" "),_("p",[v._v("经典的JavaScript格式:")]),v._v(" "),_("pre",{pre:!0,attrs:{class:"code tiscript"}},[_("code",[_("code",[v._v("function")]),v._v(" "),_("code",[v._v("(")]),v._v(" <parameters> "),_("code",[v._v(")")]),v._v(" "),_("code",[v._v("{")]),v._v(" <statements> "),_("code",[v._v("}")]),v._v("\n")])]),v._v(" "),_("p",[v._v("单表达式lambda格式:")]),v._v(" "),_("pre",{pre:!0},[_("code",[_("b",[v._v(":")]),v._v(" <parameters> "),_("b",[v._v(":")]),v._v(" <statement>\n")])]),v._v(" "),_("p",[v._v("块表达式lambda函数格式:")]),v._v(" "),_("pre",{pre:!0},[_("code",[_("b",[v._v(":")]),v._v(" <parameters> "),_("b",[v._v(":")]),v._v(" <statements> "),_("b",[v._v(":")]),v._v("\n")])]),v._v(" "),_("h3",[v._v('"That" lambda函数声明:')]),v._v(" "),_("p",[v._v("这种声明的函数没有自己的this环境变量。this环境变量取自它外部调用它的函数this，类似于\n  "),_("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions"}},[v._v("ES6中的箭头函数")]),v._v("。")]),v._v(" "),_("p",[v._v("单表达式lambda格式:")]),v._v(" "),_("pre",{pre:!0},[_("code",[_("b",[v._v("|")]),v._v(" <parameters> "),_("b",[v._v("|")]),v._v(" <statement>")])]),v._v(" "),_("p",[v._v("块表达式lambda函数格式:")]),v._v(" "),_("pre",{pre:!0},[_("code",[_("b",[v._v("|")]),v._v(" <parameters> "),_("b",[v._v("{")]),v._v(" <statements> "),_("b",[v._v("}")]),v._v(" \n")])]),v._v(" "),_("p",[v._v("嵌套函数(其他函数内部的函数)是允许的。")]),v._v(" "),_("h2",[v._v("异步方法")]),v._v(" "),_("pre",{pre:!0},[_("code",[_("b",[v._v("async function ")]),v._v("( <parameters> ) \n{ \n  (<statement> | <await-expression>)* \n}\n")])]),v._v(" "),_("p",[v._v("异步方法是异步执行的，并且可以在函数体中使用await表达式。")]),v._v(" "),_("h2",[v._v("生成器方法")]),v._v(" "),_("pre",{pre:!0},[_("code",[_("b",[v._v("function* ")]),v._v("( <parameters> ) \n{ \n  (<statement> | <yield-statement>)* \n}\n")])]),v._v(" "),_("p",[v._v("生成器方法用在for(var x in generator)语句中。生成器使用yield来发送值。")]),v._v(" "),_("h2",[_("a",{attrs:{name:"event-functions",id:"event-functions"}},[v._v("事件函数")])]),v._v(" "),_("p",[v._v("事件处理函数是一种函数名称是字符串的正常函数。它不是使用function来声明，而是使用event关键字:")]),v._v(" "),_("pre",{pre:!0},[_("code",[v._v("event name[.namespace] [$(selector)]  [( [eventObj [,element] ) ]\n")]),v._v("{\n  //... 事件处理函数体\n}\n")]),v._v(" "),_("p",[v._v("其中:")]),v._v(" "),_("ul",[_("li",[_("em",[v._v("name")]),v._v("是一个已知事件或自定义事件的名称;")]),v._v(" "),_("li",[_("em",[_("code",[v._v(".")]),v._v(" namespace")]),v._v("是类似jQuery中的任意的事件namespace的名称, 可省略;")]),v._v(" "),_("li",[_("em",[v._v("selector")]),v._v("是一个CSS选择器。如果提供了，则仅有满足条件的DOM元素上才能接收到事件, 可省略。")])]),v._v(" "),_("ul",[_("li"),v._v(" "),_("li",[v._v("调用参数是可省略的, 如果提供了，则它可以包含一个或两个参数:\n      "),_("ol",[_("li",[_("code",[v._v("eventObj")]),v._v("是接收到的事件对象实例参数名称。它可以是任意有效的名称，比如: evt, eo 或event。")]),v._v(" "),_("li",[_("code",[v._v("element")]),v._v("是接收到消息的DOM元素的参数名称。")])])])]),v._v(" "),_("h2",[_("a",{attrs:{name:"optional-parameters",id:"optional-parameters"}},[v._v("可选参数")])]),v._v(" "),_("p",[v._v("TIScript在函数声明中支持可选参数:")]),v._v(" "),_("h3",[_("a",{attrs:{name:"parameters-with-default-values",id:"parameters-with-default-values"}},[v._v("有默认值的参数")])]),v._v(" "),_("p",[v._v("在函数中的一些参数可以定义它的默认值，如:")]),v._v(" "),_("pre",{pre:!0,attrs:{class:"code tiscript"}},[_("code",[v._v("function Foo(a, b, c = 12)\n{\n  return a + b + c;\n}\n")])]),v._v(" "),_("p",[v._v("这个函数可以使用两个参数来调用:")]),v._v(" "),_("pre",{pre:!0,attrs:{class:"code tiscript"}},[_("code",[v._v("var r1 = Foo(1, 2);    // r1 = 15\n")])]),v._v(" "),_("p",[v._v("也可以使用三个参数来调用:")]),v._v(" "),_("pre",{pre:!0,attrs:{class:"code tiscript"}},[_("code",[v._v("var r2 = Foo(1, 2, 3); // r2 = 6\n")])]),v._v(" "),_("p",[v._v("在参数列表中，有默认值的参数右边不能有非可选参数，即只有最后面(或所有)的参数才可以有默认值。")]),v._v(" "),_("h3",[_("a",{attrs:{name:"varargs",id:"varargs"}},[v._v("变长参数")])]),v._v(" "),_("p",[v._v("又名 参数向量")]),v._v(" "),_("p",[v._v("有些情况下，当定义函数时，你并不知道参数的数量，这时你可以使用下面的声明:")]),v._v(" "),_("pre",{pre:!0,attrs:{class:"code tiscript"}},[_("code",[_("code",[v._v("function")]),v._v(" Bar(a, b, rest..)\n{\n  "),_("code",[v._v("var")]),v._v(" total = a + b;\n  "),_("code",[v._v("f")]),v._v("or ("),_("code",[v._v("var")]),v._v(" n "),_("code",[v._v("in")]),v._v(" rest) total += n;\n  "),_("code",[v._v("return")]),v._v(" total;\n}\n")])]),v._v(" "),_("p",[v._v("在运行期，rest变量将包含一个确定数量参数的数组。所以在")]),v._v(" "),_("pre",{pre:!0,attrs:{class:"code tiscript"}},[_("code",[_("code",[v._v("var")]),v._v(" r1 = Bar(1, 2, 3, 4);\n")])]),v._v(" "),_("p",[v._v("语句执行后，r1的值将为10, 在")]),v._v(" "),_("pre",{pre:!0,attrs:{class:"code tiscript"}},[_("code",[_("code",[v._v("var")]),v._v(" r2 = Bar(1, 2);\n")])]),v._v(" "),_("p",[v._v("语句后，r2的值将为3。")]),v._v(" "),_("h2",[v._v("字符串器函数")]),v._v(" "),_("p",[v._v("字符串器函数是一个名称以'$'开头的正常函数或方法。")]),v._v(" "),_("p",[v._v("当解析调用这个函数时，tiscript将会将'('和')'内部的任何字符都当做字符串。示例:")]),v._v(" "),_("pre",{pre:!0},[_("code",[_("code",[v._v("var")]),v._v(" bodyDiv = self.$( div#body );\n")])]),v._v(" "),_("p",[v._v("这个调用等价于:")]),v._v(" "),_("pre",{pre:!0},[_("code",[_("code",[v._v("var")]),v._v(' bodyDiv = self.$( "div#body" );\n')])]),v._v(" "),_("p",[v._v("如果'('和')'中的文本包含如')'或'}'等标识符时，需要转义成\\)或\\}.")]),v._v(" "),_("h3",[v._v("字符串器参数")]),v._v(" "),_("p",[v._v("'('和')'中的文本可以包含所谓的tiscript内嵌代码 - 需要被执行的tiscript序列并且字符串执行结果会被插入到文本中。若要在字符串中包含这样的代码，需要使用'{' 和'}'将它括起来。示例:")]),v._v(" "),_("pre",{pre:!0},[_("code",[v._v("var n = 3;\n"),_("code",[v._v("var")]),v._v(" nthDiv = self.$( div:nth-child("),_("code",[v._v("{ n }")]),v._v(") );\n")])]),v._v(" "),_("p",[v._v("上面的$()调用将会被解析成下面的语句:")]),v._v(" "),_("pre",{pre:!0},[_("code",[_("code",[v._v("var")]),v._v(" nthDiv = self.$( "),_("code",[v._v('"div:nth-child(" ')]),v._v(", n , "),_("code",[v._v('")"')]),v._v(" );\n")])]),v._v(" "),_("h3",[v._v("自定义字符串器函数")]),v._v(" "),_("p",[v._v("这是一个在Sciter中真实使用的一个字符串器函数，它被用于插入HTML片段:")]),v._v(" "),_("pre",{pre:!0},[_("code",[v._v('function Element.$append( params.. ) // 接受HTML判断，作为参数向量\n{\n  for( var i = 1; i < params.length; i += 2 ) // each odd parameter is an inclusion - result of the correspondent { ... } expression.\n    params[i] = params[i].toHtmlString();     // convert our inclusion into escaped HTML string for safety.\n  this.insert( params.join("") );             // 合并所有参数到一个字符串并且调用Element.insert(html)\n                                              // Sciter中的DOM元素的方法\n}\n')])]),v._v(" "),_("p",[v._v("有了这个函数，我们可以这样使用它:")]),v._v(" "),_("pre",{pre:!0},[_("code",[v._v("var arr = [1,2,3];\nvar table = self.$( table#some );\nfor( var n in arr ) \n  table.$append ( <tr><td>Cell #{n}</td></td> );\n")])]),v._v(" "),_("p",[v._v('上面的代码将会向表中插入包含"Cell #1", "Cell #2" and "Cell #3"文本的 三行/单元格。是不是很方便?')]),v._v(" "),_("h2",[v._v("使用对象声明的函数调用")]),v._v(" "),_("p",[v._v("如果一些函数接受一个对象参数，则它调用时可以省略'(' 和 ')'，如:")]),v._v(" "),_("pre",{pre:!0},[_("code",[v._v("  foo { one:1, two:2 } \n")])]),v._v(" "),_("p",[v._v("它等价于 JavaScript调用:")]),v._v(" "),_("pre",{pre:!0},[_("code",[v._v("  foo ({ one:1, two:2 })\n")])]),v._v(" "),_("hr"),v._v(" "),_("p",[_("sup",[_("a",{attrs:{href:"#fnt__1",id:"fn__1",name:"fn__1"}},[v._v("1)")])]),v._v(" 使用复合名称的函数声明是下面的格式的简写形式:"),_("br"),_("code",[v._v("name1.name2.name3. ... .nameN = function( <参数> ) { <语句> }")])])])}),[],!1,null,null,null);e.default=n.exports}}]);