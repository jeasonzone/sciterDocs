(window.webpackJsonp=window.webpackJsonp||[]).push([[123],{267:function(v,_,o){"use strict";o.r(_);var e=o(28),t=Object(e.a)({},(function(){var v=this,_=v.$createElement,o=v._self._c||_;return o("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[o("h1",{attrs:{id:"语句"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#语句"}},[v._v("#")]),v._v(" 语句")]),v._v(" "),o("h1",[v._v("语句")]),v._v(" "),o("dl",{staticClass:"flat"},[o("dt",[o("strong",[o("code",[v._v("{")])]),v._v(" <语句> "),o("strong",[o("code",[v._v("}")])])]),v._v(" "),o("dd",[v._v("一个语句序列，由花括号'{'和'}'分隔，被称作"),o("strong",[v._v("块")]),v._v("。一个块本身就是一个语句。每个块为它内部的"),o("strong",[v._v("var")]),v._v("和"),o("strong",[v._v("const")]),v._v("语句声明的变量建立自己的名称空间。")]),v._v(" "),o("br"),v._v(" "),o("dt",[v._v("<表达式> "),o("code",[v._v("(")]),v._v(" [<参数-表达式>[ "),o("code",[v._v(",")]),v._v(" <参数-表达式>[ "),o("code",[v._v(",")]),v._v(" ... <参数-表达式>]]] "),o("code",[v._v(")")])]),v._v(" "),o("dd",[v._v("函数/方法调用。左侧的<表达式>的值应该为一个函数引用。<参数-表达式>列表(如果存在)的求值结果将被作为函数的参数传递给函数。\n      "),o("p",[v._v("<参数-表达式>可以是一个正常表达式，也可以是一个展开操作"),o("code",[v._v("..")]),v._v("<iterable>，其中"),o("i",[v._v("iterable")]),v._v("是一个数组、元组或生成器实例。Iterable将展开成参数序列。")])]),v._v(" "),o("dt",[o("strong",[o("code",[v._v("if")])]),v._v(" "),o("strong",[o("code",[v._v("(")])]),v._v(" <表达式> "),o("strong",[o("code",[v._v(")")])]),v._v(" <语句> [ "),o("strong",[o("code",[v._v("else")])]),v._v(" <语句> ]")]),v._v(" "),o("dd",[v._v("根据条件执行一个语句，具体执行哪个语句依赖于<表达式>的结果。")]),v._v(" "),o("br"),v._v(" "),o("dt",[o("strong",[o("code",[v._v("while")])]),v._v(" [ "),o("code",[o("strong",[v._v(":")])]),v._v(" label ] "),o("strong",[o("code",[v._v("(")])]),v._v(" <表达式> "),o("strong",[o("code",[v._v(")")])]),v._v(" <语句>")]),v._v(" "),o("dd",[v._v("当<表达式>为true时执行<语句>。"),o("em",[v._v("label")]),v._v("可用在命名的"),o("em",[v._v("break")]),v._v("和"),o("em",[v._v("continue")]),v._v("语句中。")]),v._v(" "),o("br"),v._v(" "),o("dt",[o("strong",[o("code",[v._v("do")])]),v._v(" [ "),o("code",[o("strong",[v._v(":")])]),v._v(" label ] <语句> "),o("strong",[o("code",[v._v("while")])]),v._v(" "),o("strong",[o("code",[v._v("(")])]),v._v(" <表达式> "),o("strong",[o("code",[v._v(")")])])]),v._v(" "),o("dd",[v._v("执行<语句>一次，然后根据<表达式>是否为true来判断是否继续重复执行。")]),v._v(" "),o("br"),v._v(" "),o("dt",[o("strong",[o("code",[v._v("for")])]),v._v(" [ "),o("code",[o("strong",[v._v(":")])]),v._v(" label ] "),o("strong",[o("code",[v._v("(")])]),v._v(" <初始化-表达式> | "),o("strong",[o("code",[v._v("var")])]),v._v(" <name-with-initialization> "),o("code",[v._v(";")]),v._v(" [<条件-表达式>] "),o("code",[v._v(";")]),v._v(" [<递增-表达式>] "),o("strong",[o("code",[v._v(")")])]),v._v(" <语句>")]),v._v(" "),o("dd",[v._v("只要<条件-表达式>为true，则继续执行<语句>。")]),v._v(" "),o("br"),v._v(" "),o("dt",[o("strong",[o("code",[v._v("for")])]),v._v(" [ "),o("strong",[o("code",[v._v(":")])]),v._v(" label ] "),o("code",[o("strong",[v._v("(")])]),v._v(" [ "),o("strong",[o("code",[v._v("var")])]),v._v("] <name> "),o("strong",[o("code",[v._v("in")])]),v._v(" <表达式> "),o("code",[o("strong",[v._v(")")])]),v._v(" <语句1> [ "),o("code",[o("strong",[v._v("otherwise")])]),v._v(" <语句2> ]")]),v._v(" "),o("dd",[v._v("为数组、对象或函数(又名生成器函数)的每个元素执行<语句1>。如果<表达式>是一个数组，则<name>变量在每一次迭代中接收数组中的一个成员变量。如果<表达式>是对象，则<name>接收对象的每个属性名(又称键)。如果<表达式>是函数，则每次迭代会调用该函数，直到函数返回"),o("em",[v._v("nothing")]),v._v("。"),o("br"),v._v("\n\t如果循环体没有被执行(例如，当<表达式>返回一个空数组时)时，则会执行"),o("em",[v._v("otherwise")]),v._v("的语句。")]),v._v(" "),o("br"),v._v(" "),o("dt",[o("strong",[o("code",[v._v("for")])]),v._v(" [ "),o("strong",[o("code",[v._v(":")])]),v._v(" label ] "),o("code",[o("strong",[v._v("(")])]),v._v(" [ "),o("strong",[o("code",[v._v("var")])]),v._v("] "),o("em",[v._v("<name-list>")]),v._v(" "),o("strong",[o("code",[v._v("in")])]),v._v(" <表达式> "),o("code",[o("strong",[v._v(")")])]),v._v(" <语句1> [ "),o("code",[o("strong",[v._v("otherwise")])]),v._v(" <语句2> ]")]),v._v(" "),o("dd",[v._v("当"),o("em",[v._v("<name-list>")]),v._v("是一个用逗号"),o("code",[o("strong",[v._v(",")])]),v._v("分隔并用"),o("code",[o("strong",[v._v("(")])]),v._v(" "),o("code",[o("strong",[v._v(")")])]),v._v("括起来的变量列表时, 为数组、对象或函数(又名生成器函数)的每个元素执行<语句1>。"),o("br"),v._v("\n\t如果<表达式>是一个数组，则在每次迭代中，<name-list>接收连续的索引值和对应的数组成员的值。如果<表达式>是对象，则第一个变量接受属性的名称(又称键)，第二个变量接收属性的值。如果<表达式>是函数，则每次迭代会调用该函数，直到函数返回"),o("em",[v._v("nothing")]),v._v("。"),o("em",[v._v("<name-list>")]),v._v("中的变量将会接收函数返回的列表值。"),o("br"),v._v("\n\t示例:"),o("br"),v._v(" "),o("code",[v._v('for( var (k,v) in obj ) stdout.printf("k=%s,v=%v,", k, v);')]),v._v("  - 输出obj对象的每个属性的名称和值。"),o("br"),v._v(" "),o("code",[v._v('for( var (i,v) in arr ) stdout.printf("i=%d,v=%v,", i, v);')]),v._v("  - 输出arr数组的索引和该索引位置的成员的值。"),o("br"),v._v("\n\t如果循环体没有被执行(例如，当<表达式>返回一个空数组时)时，则会执行em>otherwise"),v._v("的语句。")]),v._v(" "),o("br"),v._v(" "),o("dt",[o("strong",[o("code",[v._v("switch")]),v._v(" "),o("code",[v._v("(")])]),v._v("<selector-表达式> "),o("strong",[o("code",[v._v(")")]),v._v(" "),o("code",[v._v("{")])]),v._v(" "),o("br"),v._v("                    "),o("code",[o("strong",[v._v("case")])]),v._v(" <case-表达式>"),o("strong",[o("code",[v._v(":")])]),v._v("<语句> [...] "),o("br"),v._v("                    "),o("strong",[o("code",[v._v("like")])]),v._v(" <template-表达式>"),o("strong",[o("code",[v._v(":")])]),v._v("<语句> [...]"),o("br"),v._v("                    "),o("strong",[o("code",[v._v("default:")])]),v._v("<语句> "),o("strong",[o("code",[v._v("}")])])]),v._v(" "),o("dd",[o("strong",[v._v("switch")]),v._v("语句运行从多个块中选择一个块来执行。当<case-表达式>的结果等于<selector-表达式>时，则对应的<语句>会执行。如果<template-表达式>匹配了<selector-表达式>，则对应的<语句>会执行。。如果没有匹配的<case-表达式>或<template-表达式>，则执行code>default:"),v._v("标记下的语句。")]),v._v(" "),o("br"),v._v(" "),o("dt",[o("strong",[o("code",[v._v("break")])]),v._v(" [label]"),o("strong",[o("code",[v._v(";")])])]),v._v(" "),o("dd",[o("strong",[v._v("break")]),v._v("语句用于中断一个循环体(for、for in、while、do/while)和switch语句的执行。如果label被提供，则它会中断名称标记为label的语句块。如果在当前作用域内未找到该label，则会生成一个语法错误。"),o("br"),v._v("\n\t实例: "),o("br"),v._v(" "),o("code",[v._v("for:outer ( var row in rows )"),o("br"),v._v("\n\tfor:x ( var cell in row )"),o("br"),v._v("\n\tif ( cell == current ) break outer;")])]),v._v(" "),o("br"),v._v(" "),o("dt",[o("strong",[o("code",[v._v("continue")])]),v._v(" [label]"),o("strong",[o("code",[v._v(";")])])]),v._v(" "),o("dd",[o("strong",[v._v("continue")]),v._v("语句强制一个循环(for、for in、while、do/while)调过下面的迭代语句。如果label被提供，则它会迭代到名称标记为label的语句块。如果在当前作用域内未找到该label，则会生成一个语法错误。")]),v._v(" "),o("br"),v._v(" "),o("dt",[o("strong",[o("code",[v._v("var")])]),v._v(" <name-or-name-list> [ "),o("strong",[o("code",[v._v("=")])]),v._v(" <init-表达式>] [ "),o("strong",[o("code",[v._v(",")])]),v._v(" <name> ["),o("strong",[v._v("=")]),v._v(" <init-表达式>] ... ] "),o("strong",[o("code",[v._v(";")])])]),v._v(" "),o("dd",[o("strong",[v._v("var")]),v._v("语句引入一个新的变量到当前作用域内。使用块语句( "),o("code",[o("strong",[v._v("{")])]),v._v(" ... "),o("code",[o("strong",[v._v("}")])]),v._v(" )建立一个变量作用域。("),o("em",[v._v("注意")]),v._v(": 在JavaScript中, 作用域只能在一个函数的函数体内建立)。"),o("br"),v._v(" "),o("em",[v._v("<name-or-name-list>")]),v._v("这里既可以是一个<名称>，也可以是使用逗号"),o("code",[o("strong",[v._v(",")])]),v._v("分隔并且"),o("code",[o("strong",[v._v("(")])]),v._v(" and  "),o("code",[o("strong",[v._v(")")])]),v._v("括起来的变量组。 "),o("br"),v._v("\n\t示例:"),o("br"),v._v(" "),o("code",[v._v("var (a,b,c) = 1;")]),v._v(" - 声明变量a、b、c，并且为它们赋值'1'。"),o("br"),v._v(" "),o("code",[v._v("var (a,b,c) = (1,2,3);")]),v._v(" - 等价于"),o("code",[v._v("var a = 1, b = 2, c = 3;")])]),v._v(" "),o("br"),v._v(" "),o("dt",[o("strong",[o("code",[v._v("return")])]),v._v(" [ <表达式> | <表达式-列表> ] "),o("strong",[o("code",[v._v(";")])])]),v._v(" "),o("dd",[o("strong",[v._v("return")]),v._v("语句终止当前函数的执行，它还可以返回<表达式>或<表达式-列表>作为结果。如果表达式被省略，则函数会返回特定的"),o("em",[v._v("undefined")]),v._v("值。 "),o("br"),v._v("\n\t注意："),o("em",[v._v("return")]),v._v("可以通过表达式列表返回多个值:"),o("br"),v._v(" "),o("code",[v._v("function rect() { return (10,10,100,100); }"),o("br"),v._v("\n\tvar (x,y,width,height) = rect(); // x和y获取到'10'，width和height获取到'100'。")])]),v._v(" "),o("br"),v._v(" "),o("dt",[o("strong",[o("code",[v._v("const")])]),v._v(" <名称> "),o("strong",[v._v("=")]),v._v(" <初始化-表达式> [ "),o("strong",[o("code",[v._v(",")])]),v._v(" <名称> "),o("strong",[v._v("=")]),v._v(" <初始化-表达式> ... ] "),o("strong",[o("code",[v._v(";")])])]),v._v(" "),o("dd",[o("strong",[v._v("const")]),v._v("语句引入一个新的命名常量到当前作用域。在const语句外，任何试图对<名称>赋值的语句都会生成一个编译时错误。")]),v._v(" "),o("br"),v._v(" "),o("dt",[o("strong",[o("code",[v._v("try")])]),v._v(" <语句> "),o("strong",[o("code",[v._v("catch")])]),v._v(" "),o("strong",[o("code",[v._v("(")])]),v._v(" <变量名> "),o("strong",[o("code",[v._v(")")])]),v._v(" <catch-语句> "),o("strong",[o("code",[v._v("finally")])]),v._v(" <finally-语句>")]),v._v(" "),o("dd",[o("strong",[v._v("try")]),v._v("语句闭合一个可能发生异常(如运行期错误、一个"),o("strong",[v._v("throw")]),v._v("语句)的代码块。catch部分的语句提供了异常处理代码。当一个catch捕捉到异常，它的<变量名>将绑定到该异常。<finally-语句>在"),o("strong",[v._v("try")]),v._v("块后无条件执行——无论<语句>是否发生。")]),v._v(" "),o("br"),v._v(" "),o("dt",[o("code",[o("strong",[v._v("with")])]),v._v(" "),o("code",[o("strong",[v._v("(")])]),v._v(" <表达式:对象> "),o("code",[o("strong",[v._v(")")])]),v._v(" <语句>")]),v._v(" "),o("dd",[v._v("当执行<语句>语句时，将给定的对象添加到正在使用的作用域链中。对象两边的括号是必须的。")]),v._v(" "),o("br"),v._v(" "),o("dt",[o("code",[o("strong",[v._v("await")])]),v._v(" <返回一个promise的表达式> ;")]),v._v(" "),o("dd",[o("strong",[v._v("await")]),v._v("语句暂停当前task函数的执行，直到promise被解决(完成或拒绝)。如果promise被拒绝，则会在当前函数的上下文中抛出一个错误。如果一个函数中出现了"),o("strong",[v._v("await")]),v._v("语句，则这个函数会被当做task函数(任务)，调用这个任务函数将直接返回一个代表这个函数的promise，而不是执行它的函数体。")]),v._v(" "),o("br"),v._v(" "),o("dt",[o("code",[o("strong",[v._v("yield")])]),v._v(" <表达式>;")]),v._v(" "),o("dd",[o("strong",[v._v("yield")]),v._v("语句将暂停当前生成器函数的执行，并返回表达式的值。如果一个函数中出现了"),o("strong",[v._v("yield")]),v._v("语句，则这个函数会被当做生成器函数——内部包含一个状态来进行协程。")]),v._v(" "),o("br"),v._v(" "),o("br"),v._v(" "),o("dt",[o("code",[o("strong",[v._v("include")])]),v._v(" <字符串-表达式> | <stream-表达式> | <bytes-表达式> "),o("code",[v._v(";")])]),v._v(" "),o("dd",[v._v("include语句定义被引入(加载和求值)到当前名称空间的脚本。表达式可以是以下值之一: \n    "),o("ul",[o("li",[v._v("字符串或字符串变量 - 进入文件的文件名。文件可以包含脚本源代码或编译后的字节码;")]),v._v(" "),o("li",[v._v("求值为stream流的表达式;")]),v._v(" "),o("li",[v._v("求值为Bytes数组的表达式。")])])]),v._v(" "),o("dt",[o("strong",[o("code",[v._v("assert")])]),v._v(" <测试-表达式> [ "),o("strong",[o("code",[v._v(":")])]),v._v(" <信息-表达式> ] "),o("strong",[o("code",[v._v(";")])])]),v._v(" "),o("dd",[o("strong",[v._v("assert")]),v._v(" "),o("p",[v._v("语句允许你测试你的程序中的断言。当<测试-表达式>在运行期为"),o("em",[v._v("false")]),v._v("时，将会抛出一个异常，该异常包含源码文本中的<测试-表达式>和<信息-表达式>。")]),v._v(" "),o("p",[v._v("注意: 当没有打开调试器时, 该语句将没有作用(NOP - 空语句)。")])]),v._v(" "),o("dt",[o("code",[o("strong",[v._v("debug break;")])])]),v._v(" "),o("dd",[v._v("在源代码中定义显性的断点, 当调试器打开时，代码执行到该位置时将自动停在该行。当调试器没打开时，该语句将没有作用(NOP - 空语句)。")]),v._v(" "),o("dt",[o("code",[o("strong",[v._v("debug namespace;")])])]),v._v(" "),o("dd",[v._v("输出当前名称空间链到调试控制台;")]),v._v(" "),o("dt",[o("code",[o("strong",[v._v("debug stacktrace;")])])]),v._v(" "),o("dd",[v._v("输出当前位置的调用堆栈到调试控制台;")]),v._v(" "),o("dt",[o("code",[o("strong",[v._v("debug [log | info | warning | alert] :")])]),v._v(" <space-separated-list-of-expressions> "),o("code",[o("strong",[v._v(";"),o("br"),v._v("\n    debug [log | info | warning | alert] (")])]),v._v(" <stringizer-function-parameters> "),o("code",[o("strong",[v._v(")")])])]),v._v(" "),o("dd",[o("p",[v._v("日志输出: 将表达式的执行结果输出到调试控制台。第二种格式支持字符串器参数，比如:")]),v._v(" "),o("pre",{pre:!0},[o("code",[v._v("debug info ( object data {obj} );")])]),v._v(" "),o("p",[v._v("注意: 当调试器没打开时，该语句将没有作用(NOP - 空语句);")])]),v._v(" "),o("dt",[v._v("<表达式>"),o("strong",[o("code",[v._v(";")])])]),v._v(" "),o("dd",[v._v("表达式以 ';'结尾作为一个语句。<表达式>的结果是可变的。")])])])}),[],!1,null,null,null);_.default=t.exports}}]);