(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{333:function(e,t,s){"use strict";s.r(t);var n=s(28),a=Object(n.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h2",{attrs:{id:"sciter的plus框架"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sciter的plus框架"}},[e._v("#")]),e._v(" Sciter的Plus框架")]),e._v(" "),s("div",{staticClass:"post",attrs:{id:"post-41821"}},[s("h1",{staticClass:"storytitle"},[e._v("MV*(Model-View-Whatever), Sciter的Plus引擎")])]),e._v(" "),s("div",{staticClass:"storycontent"},[s("h4",[e._v("前言")]),e._v(" "),s("p",[e._v('我想说，人类的历史就是一个不断地重复造各种"轮子"的历史。')]),e._v(" "),s("p",[e._v("这次，我们将看到"),s("em",[e._v("数据绑定")]),e._v("的概念，它类似于"),s("em",[e._v("模型-视图-控制器")]),e._v("。当然, 许多人为MVC定义了很多含义，但是还没有人为"),s("em",[e._v("数据绑定")]),e._v("定义基础概念 – 你有一些数据(也叫模型)"),s("em",[e._v("声明")]),e._v('绑定了UI "控件"(视图)。 我相信Microsoft’的VisualBasic 4 和它的IDE是这个思想的第一个可用的实现。那时还没有"控制器"的概念，所以他们的实现是非常有限制的 – 虽然你可以通过简单的声明来实现90%的数据编辑，但是你得花90%的设计时间来完成剩余的10%的必须功能。')]),e._v(" "),s("h4",[e._v("Sciter的Plus框架")]),e._v(" "),s("p",[e._v("你可以在Sciter SDK中找到Plus框架，它是一个非常紧凑(400 LOC)的库，它是旧的数据绑定概念中的控制器的简单实现。")]),e._v(" "),s("p",[e._v("注意, Plus并不想像AngularJS那样试图解决每个html/css/script UI的问题。它只是一个使用@observing函数(控制器)的数据绑定机制。")]),e._v(" "),s("h4",[e._v("基本部分")]),e._v(" "),s("p",[e._v("Plus中的模型是一些tiscript的名称空间对象，它包含一些数据(也可以有函数)，该对象绑定到HTML DOM元素中的特定容器上。")]),e._v(" "),s("p",[e._v("例如，你可以在脚本中声明: ")]),e._v(" "),s("pre",{staticClass:"brush: js;"},[s("code",[e._v('namespace Data {\n  var correspondent = "world"; // 待绑定的变量\n}')])]),e._v(" "),s("p",[e._v("对应的HTML标记代码如下:")]),e._v(" "),s("pre",{staticClass:"brush: html;"},[s("code",[e._v('<section model="Data">\n   Whom to greet: <input name="correspondent"> ?\n   <p>The greeting: Hello <output name="correspondent">!</p>\n</section>')]),e._v("\n")]),e._v(" "),s("p",[e._v('然后在你的文档中引入"plus.css"文件，这样就可以将'),s("code",[e._v("Data.correspondent")]),e._v("变量与两个DOM元素动态绑定了: input[name=correspondent]是双向绑定，而output[name=correspondent]是单向绑定(仅视图)。所以当你在输入框中输入一些信息后，你将看到你输入的信息在output元素上显示。你可以使用SDK中sciter.exe来参看"),s("u",[e._v("sdk/samples/+plus/demos/0-basic-variable-binding.htm")]),e._v("示例。")]),e._v(" "),s("h4",[e._v("model 和 name DOM属性")]),e._v(" "),s("p",[e._v("注意<section>元素的"),s("code",[e._v('model="Data"')]),e._v("属性。它指示Plus引擎为它的内容元素与"),s("code",[e._v("namsepace Data {}")]),e._v('的成员变量间建立动态绑定关系。绑定的名称空间的名称可以是任意的，不只是"data"。')]),e._v(" "),s("p",[e._v("section[model]中任何定义了"),s("em",[e._v("name")]),e._v("属性的DOM元素，在绑定初始化阶段，Plus都会尝试为它们在模型对应的名称空间中找到对应名称的数据变量，如果找到这个变量，将会为该数据变量与DOM元素的.value值间建立双向或单向绑定(为<output>元素)。 name属性的值可以是由‘"),s("code",[e._v(".")]),e._v("‘点号分隔的名称列表，使用这种方式，你可以将某个DOM元素绑定到模型中一个对象字段上: "),s("br")]),e._v(" "),s("pre",{staticClass:"brush: js;"},[s("code",[e._v('namespace Contact {\n  var name = { first: "Albert", last: "Einshtein" };\n  var phone = "....";\n  ... \n}')]),e._v("\n")]),e._v(" "),s("p",[e._v("对应的HTML标记代码:")]),e._v(" "),s("pre",{staticClass:"brush: html;"},[s("code",[e._v('<form model="Contact" id="contact-details"> \n  <label for="name.first">First name></label> <input name="name.first">\n  <label for="name.last">Last name></label> <input name="name.last">\n  ...\n</form>')]),e._v("\n")]),e._v(" "),s("p",[s("img",{staticStyle:{float:"right"},attrs:{src:"images/plus-part-0.png",alt:"Celsius to Fahrenheit convertor.",width:"405",height:"318"}})]),e._v(" "),s("h4",[e._v("控制器,  @observing函数装饰器")]),e._v(" "),s("p",[e._v("plus.tis(Plus引擎的实现)文件包含了"),s("em",[e._v("@observing")]),e._v("函数装饰器的声明。使用这个装饰器，你可以定义一个函数，当被观察的变量改变时，该函数将被触发(被引擎调用)。")]),e._v(" "),s("p",[e._v("这里提供一个简单的摄氏度与华氏度双向转换的示例—— 当你输入一个摄氏度值时，对应的华氏度值会自动计算并显示，反之亦然。界面类似于右边的图片:")]),e._v(" "),s("p",{staticStyle:{clear:"both"}},[e._v("首先，我们定义我们的Data名称空间:")]),e._v(" "),s("pre",{staticClass:"brush: js;"},[s("code",[e._v("      include \"../plus.tis\"; // 下面的模型使用了plus.tis中的@observing装饰器\n      namespace Data // 我们的模型\n      {  \n        var celsius = 0; \n        var fahrenheit = 32;\n        // 这个函数观察'celsius'，并且计算'fahrenheit'\n        @observing \"celsius\"\n          function toFahrenheit() {\n            fahrenheit = celsius * 9 / 5 + 32;\n          }\n        // 这个函数观察'fahrenheit'，并且计算'celsius'\n        @observing \"fahrenheit\"\n          function toCelcius() {\n            celsius = (fahrenheit - 32) * 5 / 9;\n          }        \n      }    ")]),e._v("\n")]),e._v(" "),s("p",[e._v("注意上面的两个函数: "),s("code",[e._v("toFahrenheit()")]),e._v("函数观察"),s("code",[e._v("celcius")]),e._v("变量。当"),s("code",[e._v("celcius")]),e._v("变量将改变时，例如作为"),s("code",[e._v("<input|number(celsius)>")]),e._v("的结果，"),s("code",[e._v("toFahrenheit()")]),e._v("函数将被触发，并且设置"),s("code",[e._v("fahrenheit")]),e._v("变量。同样，我们有另一个输入框绑定了"),s("code",[e._v("fahrenheit")]),e._v("变量: ")]),e._v(" "),s("pre",{staticClass:"brush: html;"},[s("code",[e._v('<body model="Data">\n  <p><input|number(celsius)>°C and <input|number(fahrenheit)>°F</p>\n</body>')]),e._v("\n")]),e._v(" "),s("p",[e._v("我们将会看到计算的结果。这个工作流程是双向的 – '从fahrenheit到celcius' 和 '从celcius到fahrenheit'。")]),e._v(" "),s("p",[e._v("你可以使用SDK中sciter.exe来参看"),s("u",[e._v("sdk/samples/+plus/demos/1-basic-function-binding.htm")]),e._v("示例。")]),e._v(" "),s("p",[e._v("下一篇文章，我将会说明如何使用"),s("code",[e._v("repeatable")]),e._v("属性来绑定对象数组，以及一些其他示例。你也可以参看SDK中"),s("u",[e._v("sdk/samples/+plus/demos")]),e._v("/目录下的其他示例，它们都是自描述的。")])])])}),[],!1,null,null,null);t.default=a.exports}}]);