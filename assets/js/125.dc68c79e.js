(window.webpackJsonp=window.webpackJsonp||[]).push([[125],{285:function(e,t,v){"use strict";v.r(t);var _=v(28),n=Object(_.a)({},(function(){var e=this,t=e.$createElement,v=e._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h1",{attrs:{id:"task"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#task"}},[e._v("#")]),e._v(" Task")]),e._v(" "),v("p",[e._v("Task对象表示一个Task - 协同例程 - 一个可以在函数执行未完成之前中断并返回一个值的函数。当这个协同例程被再次调用时, 它将继续从上次的中断点处继续执行，且它的执行上下文环境保持不变。")]),e._v(" "),v("p",[e._v("在Sciter中，有两种类型的协同例程: ")]),e._v(" "),v("ul",[v("li",[v("strong",[e._v("生成器(Generator)")]),e._v(" - 使用了"),v("code",[e._v("yield")]),e._v("语句的普通的函数。")]),e._v(" "),v("li",[v("strong",[e._v("异步任务(Asynchronous task)")]),e._v(" - 在函数体中使用了"),v("code",[e._v("await")]),e._v("语句的普通函数。")])]),e._v(" "),v("h3",[e._v("Task创建方法")]),e._v(" "),v("p",[e._v("要创建一个生成器或异步任务，你可以在定义函数体时使用"),v("em",[e._v("yield")]),e._v(" 或 "),v("em",[e._v("await")]),e._v("语句: ")]),e._v(" "),v("p",[e._v("异步任务:")]),e._v(" "),v("pre",{pre:!0},[v("code",[e._v("async function getRemoteData(url) {  // 异步任务\n   try { \n       var data = await self.request(#get, url);\n       return data;\n   } catch (e) {\n       return null; \n   }\n}\n")])]),e._v(" "),v("p",[e._v("生成器:")]),e._v(" "),v("pre",{pre:!0},[v("code",[e._v("function* listItemsBackward(list) {  // 生成器任务\n     for(var i = list.length - 1; i >= 0; --i)\n       yield list[i];\n}\n// 使用生成器:\nvar list = [0,1,2,3];\nfor(var item in listItemsBackward(list))\n  stdout.println(item);\n")])]),e._v(" "),v("dl",[v("h3",[e._v("Task的调用")]),e._v(" "),v("p",[e._v("要启动一个生成器或异步任务，你只需将它当做普通函数一样调用即可。它们与普通函数的唯一区别时：这些函数会立即完成并返回，但这不代表这个函数已经指向完成，而且它返回的是一个Task对象。")]),e._v(" "),v("p",[e._v("返回的这个Task对象内部存储了这个函数，以及它的状态和'未来值' - 即这个值只有当await语句完成(异步任务)或再次调用它的next()方法时才有意义。")]),e._v(" "),v("h3",[e._v('异步任务是一个"thenable"例程')]),e._v(" "),v("p",[e._v("异步Task对象有一个"),v("code",[e._v("then()")]),e._v("方法，它和Promise/A+规范一致，所以它可以被当做一个promise。例如，下面函数也是一个异步任务，它并行启动了两个task，并且等待它们的完成: ")]),e._v(" "),v("pre",{pre:!0},[v("code",[e._v('function getRemoteDataItems() \n{\n // 等待这两个请求处理完成:\n var items = promise.when( getRemoteData("http://example.com/api/v2/item1" ),\n                           getRemoteData("http://example.com/api/v2/item2" ));\n stdout.println(items[0],items[1]);\n}\n')])]),e._v(" "),v("h2",[e._v("属性")]),e._v(" "),v("dt",[e._v("isAsync")]),e._v(" "),v("dd",[e._v("readonly, "),v("em",[e._v("true")]),e._v(" 如果这个Task是一个激活的异步任务(等待IO操作的完成)则返回"),v("em",[e._v("true")]),e._v(", 否则这个属性为"),v("em",[e._v("false")]),e._v("。")]),e._v(" "),v("dt",[e._v("isGenerator")]),e._v(" "),v("dd",[e._v("readonly, "),v("em",[e._v("true")]),e._v(" 如果这个Task是一个激活的(未完成)的生成器这返回"),v("em",[e._v("true")]),e._v(",否则返回"),v("em",[e._v("false")]),e._v(".")]),e._v(" "),v("h2",[e._v("方法")]),e._v(" "),v("dt",[e._v("then")]),e._v(" "),v("dd",[v("div",[e._v("( "),v("strong",[e._v("onFulfilled")]),e._v(": function [, "),v("strong",[e._v("onRejected")]),e._v(": function] ) : this Task")]),e._v(" "),v("p",[e._v("添加onFulfilled和onRejected回调函数到task的回调列表。在task完成时会调用onFulfilled(result)或onRejected(error)。")]),e._v(" "),v("p",[e._v("then()方法可以被异步任务例程调用")])]),e._v(" "),v("dt",[e._v("catch")]),e._v(" "),v("dd",[v("div",[e._v("( "),v("strong",[e._v("onRejected")]),e._v(": function ) : this Task"),v("p"),e._v(" "),v("p",[e._v("添加onRejected回调函数到task回调列表中。onRejected(error)将在task抛出错误时被调用。")])]),e._v(" "),v("p",[e._v("catch()方法仅在异步task例程中被调用。")]),e._v(" "),v("p",[e._v("等价于调用"),v("code",[e._v("task.then(null, onRejected);")]),e._v("。")])]),e._v(" "),v("dt",[e._v("finally")]),e._v(" "),v("dd",[v("div",[e._v("( "),v("strong",[e._v("onComplete")]),e._v(": function ) : this Task")]),e._v(" "),v("p",[e._v("添加onComplete回调函数到task回调列表中。onComplete(result | error)将在任务完成时被调用。")]),e._v(" "),v("p",[e._v("finally()方法仅在异步task例程中被调用。")]),e._v(" "),v("p",[e._v("等价于调用"),v("code",[e._v("task.then(onComplete, onComplete);")]),e._v("。")])]),e._v(" "),v("dt",[e._v("next")]),e._v(" "),v("dd",[v("div",[e._v("( [val:any]  ) : value")]),e._v(" "),v("p",[e._v("调用生成器函数，并且返回函数中yield语句的返回值。")]),e._v(" "),v("p",[e._v("next()方法尽可以被生成器例程调用。")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);