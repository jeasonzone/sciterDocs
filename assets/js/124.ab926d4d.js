(window.webpackJsonp=window.webpackJsonp||[]).push([[124],{266:function(v,_,t){"use strict";t.r(_);var o=t(28),r=Object(o.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"语法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#语法"}},[v._v("#")]),v._v(" 语法")]),v._v(" "),t("h2",[v._v("词法结构")]),v._v(" "),t("h2",[v._v("标识符")]),v._v(" "),t("p",[v._v("标识符以字母或'_'、'$'、'@'开头，购买跟着一些字母、'_'、'$'、'@'、数字([0-9])。 "),t("br"),v._v('"Foo"、"foo"和"FOO"是3个不同的有效标识符。')]),v._v(" "),t("h2",[v._v("关键字")]),v._v(" "),t("p",[v._v("下面是该语言使用的关键字列表。这些不能被用于当做标识符：")]),v._v(" "),t("pre",{pre:!0},[t("code",[v._v("function,   var,      if,       else,     while,     return,   for,\nbreak,      continue, do,       switch,   case,      default,  null,\nsuper,      new,      try,      catch,    finally,   throw,    typeof,\ninstanceof, in,       property, const,    get,       set,      include,\nlike,       yield,    type,     class,    namespace, assert,   debug\notherwise\n")])]),v._v(" "),t("h2",[v._v("操作符")]),v._v(" "),t("p",[v._v("该语言使用的操作符：")]),v._v(" "),t("pre",{pre:!0},[t("code",[v._v("      =     !     ~     ^     *     /     %\n+     -     &     |     =    >    &&    ||    ++    --    +=    -=    *=    /=\n%=    &=    |=    ^=    >=   ..    ===   !==\n>>   >>=  ~/    ~%    /~    %~\n")])]),v._v(" "),t("p",[v._v("特殊符号：")]),v._v(" "),t("pre",{pre:!0},[t("code",[v._v('[ ] { } # " &apos `\n')])]),v._v(" "),t("h2",[v._v("注释")]),v._v(" "),t("p",[v._v("多行注释文本括在"),t("code",[v._v("/*")]),v._v("和"),t("code",[v._v("*/")]),v._v("括号。")]),v._v(" "),t("p",[v._v("单行注释以"),t("code",[v._v("//")]),v._v("开始，直至行尾。")]),v._v(" "),t("h2",[v._v("数据声明")]),v._v(" "),t("h3",[v._v("整数类型")]),v._v(" "),t("table",{attrs:{cellspacing:"1",cellpadding:"3",border:"0",bgcolor:"black"}},[t("tbody",[t("tr",{attrs:{valign:"top"}},[t("td",{attrs:{bgcolor:"white"}},[t("b",[v._v("模式")])]),v._v(" "),t("td",{attrs:{bgcolor:"white"}},[t("b",[v._v("示例")])]),v._v(" "),t("td",{attrs:{bgcolor:"white"}},[t("b",[v._v("说明")])])]),v._v(" "),t("tr",{attrs:{valign:"top"}},[t("td",{attrs:{bgcolor:"white"}},[t("code",[v._v("-?[1-9][0-9]*")])]),v._v(" "),t("td",{attrs:{bgcolor:"white"}},[v._v("34")]),v._v(" "),t("td",{attrs:{bgcolor:"white"}},[v._v("十进制数字")])]),v._v(" "),t("tr",{attrs:{valign:"top"}},[t("td",{attrs:{bgcolor:"white"}},[t("code",[v._v("-?0[0-9]*")])]),v._v(" "),t("td",{attrs:{bgcolor:"white"}},[v._v("0336")]),v._v(" "),t("td",{attrs:{bgcolor:"white"}},[v._v("八进制数字")])]),v._v(" "),t("tr",{attrs:{valign:"top"}},[t("td",{attrs:{bgcolor:"white"}},[t("code",[v._v("-?0[xX][0-9a-fA-F]+")])]),v._v(" "),t("td",{attrs:{bgcolor:"white"}},[v._v("0x3d")]),v._v(" "),t("td",{attrs:{bgcolor:"white"}},[v._v("16进制数字")])]),v._v(" "),t("tr",{attrs:{valign:"top"}},[t("td",{attrs:{bgcolor:"white"}},[t("code",[v._v("'.'")])]),v._v(" "),t("td",{attrs:{bgcolor:"white"}},[v._v("'A'")]),v._v(" "),t("td",{attrs:{bgcolor:"white"}},[v._v("字符代码(整数)")])])])]),v._v(" "),t("h3",[v._v("浮点类型")]),v._v(" "),t("table",{attrs:{cellspacing:"1",cellpadding:"3",border:"0",bgcolor:"black"}},[t("tr",{attrs:{valign:"top"}},[t("td",{attrs:{bgcolor:"white"}},[t("b",[v._v("模式")])]),v._v(" "),t("td",{attrs:{bgcolor:"white"}},[t("b",[v._v("示例")])]),v._v(" "),t("td",{attrs:{bgcolor:"white"}},[t("b",[v._v("说明")])])]),v._v(" "),t("tr",{attrs:{valign:"top"}},[t("td",{attrs:{bgcolor:"white"}},[t("code",[v._v("-?[0-9]*\\.[0-9]+")])]),v._v(" "),t("td",{attrs:{bgcolor:"white"}},[v._v("3.1415926")]),v._v(" "),t("td",{attrs:{bgcolor:"white"}},[v._v("3.1415926")])]),v._v(" "),t("tr",{attrs:{valign:"top"}},[t("td",{attrs:{bgcolor:"white"}},[t("code",[v._v("-?[0-9]+[eE]-?[0-9]+")])]),v._v(" "),t("td",{attrs:{bgcolor:"white"}},[v._v("-5e3")]),v._v(" "),t("td",{attrs:{bgcolor:"white"}},[v._v("-5000.0")])]),v._v(" "),t("tr",{attrs:{valign:"top"}},[t("td",{attrs:{bgcolor:"white"}},[t("code",[v._v("-?[0-9]*\\.[0-9]+[eE]-?[0-9]+")])]),v._v(" "),t("td",{attrs:{bgcolor:"white"}},[v._v(".22e-2")]),v._v(" "),t("td",{attrs:{bgcolor:"white"}},[v._v("0.0022")])])]),v._v(" "),t("h3",[v._v("字符串类型")]),v._v(" "),t("p",[v._v("字符串是一个使用双引号"),t("code",[v._v('"')]),v._v("或单引号"),t("code",[v._v("`")]),v._v("(字符代码为0x60)括起来的字符列表。")]),v._v(" "),t("p",[t("code",[v._v('"Hello world"')]),v._v("和"),t("code",[v._v("`Hello world`")]),v._v("都是有效的字符串。在字符串中以反斜杠("),t("code",[v._v("\\")]),v._v(")开始的字符是转义字符。")]),v._v(" "),t("p",[v._v("转义规则:")]),v._v(" "),t("table",{attrs:{bgcolor:"#000000",border:"0",cellpadding:"3",cellspacing:"1"}},[t("tbody",[t("tr",{attrs:{valign:"top"}},[t("td",{attrs:{bgcolor:"#ffffff"}},[t("strong",[v._v("转移字符")])]),v._v(" "),t("td",{attrs:{bgcolor:"#ffffff"}},[t("strong",[v._v("意义")])])]),v._v(" "),t("tr",{attrs:{valign:"top"}},[t("td",{attrs:{bgcolor:"#ffffff"}},[t("code",[v._v("\\b")])]),v._v(" "),t("td",{attrs:{bgcolor:"#ffffff"}},[v._v("退格(BS) ，将当前位置移到前一列")])]),v._v(" "),t("tr",{attrs:{valign:"top"}},[t("td",{attrs:{bgcolor:"#ffffff"}},[t("code",[v._v("\\t")])]),v._v(" "),t("td",{attrs:{bgcolor:"#ffffff"}},[v._v("水平制表(HT) （跳到下一个TAB位置）")])]),v._v(" "),t("tr",{attrs:{valign:"top"}},[t("td",{attrs:{bgcolor:"#ffffff"}},[t("code",[v._v("\\n")])]),v._v(" "),t("td",{attrs:{bgcolor:"#ffffff"}},[v._v("换行(LF) ，将当前位置移到下一行开头")])]),v._v(" "),t("tr",{attrs:{valign:"top"}},[t("td",{attrs:{bgcolor:"#ffffff"}},[t("code",[v._v("\\f")])]),v._v(" "),t("td",{attrs:{bgcolor:"#ffffff"}},[v._v("换页(FF)")])]),v._v(" "),t("tr",{attrs:{valign:"top"}},[t("td",{attrs:{bgcolor:"#ffffff"}},[t("code",[v._v("\\r")])]),v._v(" "),t("td",{attrs:{bgcolor:"#ffffff"}},[v._v("回车(CR) ，将当前位置移到本行开头")])]),v._v(" "),t("tr",{attrs:{valign:"top"}},[t("td",{attrs:{bgcolor:"#ffffff"}},[t("code",[v._v('\\"')])]),v._v(" "),t("td",{attrs:{bgcolor:"#ffffff"}},[v._v('双引号"字符')])]),v._v(" "),t("tr",{attrs:{valign:"top"}},[t("td",{attrs:{bgcolor:"#ffffff"}},[t("code",[v._v("\\\\")])]),v._v(" "),t("td",{attrs:{bgcolor:"#ffffff"}},[v._v("反斜杠\\字符")])]),v._v(" "),t("tr",{attrs:{valign:"top"}},[t("td",{attrs:{bgcolor:"#ffffff"}},[t("code",[v._v("\\`")])]),v._v(" "),t("td",{attrs:{bgcolor:"#ffffff"}},[v._v("单引号`字符")])]),v._v(" "),t("tr",{attrs:{valign:"top"}},[t("td",{attrs:{bgcolor:"#ffffff"}},[t("code",[v._v("\\[0-7]{1,3}")])]),v._v(" "),t("td",{attrs:{bgcolor:"#ffffff"}},[v._v("\\116 - 八进制字符")])]),v._v(" "),t("tr",{attrs:{valign:"top"}},[t("td",{attrs:{bgcolor:"#ffffff"}},[t("code",[v._v("\\x[0-9a-fA-F]{1,2}")])]),v._v(" "),t("td",{attrs:{bgcolor:"#ffffff"}},[v._v("\\4e - 16进制字符代码")])]),v._v(" "),t("tr",{attrs:{valign:"top"}},[t("td",{attrs:{bgcolor:"#ffffff"}},[t("code",[v._v("\\u[0-9a-fA-F]{4}")])]),v._v(" "),t("td",{attrs:{bgcolor:"#ffffff"}},[v._v("\\u004E - unicode字符代码")])])])]),v._v(" "),t("p",[v._v("以空格或EOL字符分隔的两个或多个字符串，会被当做一个字符串。因此下面的字符串：")]),v._v(" "),t("pre",{pre:!0},[t("code",[v._v('var str1 = "The quick brown "\n           "fox jumps over "\n           "the lazy dog";\nvar str2 = "The quick brown fox jumps over the lazy dog";\n')])]),v._v(" "),t("p",[v._v("含义是一样的。")]),v._v(" "),t("h3",[v._v("标识符(Symbol)")]),v._v(" "),t("p",[v._v("标识符是以'"),t("code",[v._v("#")]),v._v("'开始，后面跟着一个或多个有效字符的序列。")]),v._v(" "),t("p",[v._v("有效字符这里指: 大写或小写的字母、数字、'_'、'"),t("code",[v._v("$")]),v._v("'、'"),t("code",[v._v("@")]),v._v("'、'"),t("code",[v._v("-")]),v._v("'。")]),v._v(" "),t("p",[v._v("注意：这个标识符可以包含'"),t("code",[v._v("-")]),v._v("'(减号)。这是为了支持CSS名称。下面是一个有效标识符的示例：")]),v._v(" "),t("pre",{pre:!0},[t("code",[v._v("var symFontFace = #font-face;\nvar symBorder = #border;\n")])]),v._v(" "),t("h3",[v._v("特殊字符")]),v._v(" "),t("table",{attrs:{bgcolor:"#000000",border:"0",cellpadding:"3",cellspacing:"1"}},[t("tbody",[t("tr",{attrs:{valign:"top"}},[t("td",{attrs:{bgcolor:"#ffffff"}},[t("strong",[v._v("字符")])]),v._v(" "),t("td",{attrs:{bgcolor:"#ffffff"}},[t("strong",[v._v("说明")])])]),v._v(" "),t("tr",{attrs:{valign:"top"}},[t("td",{attrs:{bgcolor:"#ffffff"}},[t("code",[v._v("undefined")])]),v._v(" "),t("td",{attrs:{bgcolor:"#ffffff"}},[v._v("隐式地没有值(no-value)。在访问对象中不存在的属性时会返回该值。"),t("br"),v._v("\n\t  使用typeof判断"),t("em",[v._v("undefined")]),v._v("的类型为#symbol。")])]),v._v(" "),t("tr",{attrs:{valign:"top"}},[t("td",{attrs:{bgcolor:"#ffffff"}},[t("code",[v._v("null")])]),v._v(" "),t("td",{attrs:{bgcolor:"#ffffff"}},[v._v("显式地没有值(no-value)。使用typeof判断"),t("em",[v._v("null")]),v._v("的类型为#object。")])]),v._v(" "),t("tr",{attrs:{valign:"top"}},[t("td",{attrs:{bgcolor:"#ffffff"}},[t("code",[v._v("true")])]),v._v(" "),t("td",{attrs:{bgcolor:"#ffffff"}},[v._v("逻辑操作中的'真'值。使用typeof判断"),t("em",[v._v("true")]),v._v("的类型为#boolean。")])]),v._v(" "),t("tr",{attrs:{valign:"top"}},[t("td",{attrs:{bgcolor:"#ffffff"}},[t("code",[v._v("false")])]),v._v(" "),t("td",{attrs:{bgcolor:"#ffffff"}},[v._v("逻辑操作中的'假'值。使用typeof判断"),t("em",[v._v("false")]),v._v("的类型为#boolean。")])])])]),v._v(" "),t("h3",[v._v("数组声明")]),v._v(" "),t("p",[v._v("数组声明允许定义(创建)一个内联数组。数组的声明是以逗号分隔，以"),t("code",[v._v("[")]),v._v("、"),t("code",[v._v("]")]),v._v("(方括号)闭合的表达式初始化列表:")]),v._v(" "),t("pre",{pre:!0},[t("code",[v._v('var a = [ 1, 2, 3, "four", 5 ];\n')])]),v._v(" "),t("p",[v._v("在上面的语句中，"),t("em",[v._v("a")]),v._v("变量获取了一个新定义地有5个元素的数组。")]),v._v(" "),t("p",[v._v("任何在最后一个元素和"),t("code",[v._v("]")]),v._v("(闭合方括号)间的"),t("code",[v._v(",")]),v._v(" (逗号)都将会被忽略。因此，下面的声明是一个有效的数组声明：")]),v._v(" "),t("pre",{pre:!0},[t("code",[v._v('var a = [ 1, 2, 3, "four", 5, ];')])]),v._v(" "),t("h4",[v._v("数组声明中的展开操作符")]),v._v(" "),t("p",[v._v("数组声明中可以包含所谓的“展开表达式”："),t("code",[v._v(".. <iterable>")]),v._v("，其中"),t("code",[v._v("<iterable>")]),v._v("可以是一个数组、元组或生成器实例。展开操作符可以使数组名称从其他数组或生成序列中组合成新数组。所以以下代码结果将为"),t("code",[v._v("true")]),v._v(":")]),v._v(" "),t("pre",{pre:!0},[t("code",[v._v("var a1 = [0,1,2];\nvar a2 = [..a1, 3, 4];\na2 == [0, 1, 2, 3, 4];")])]),v._v(" "),t("p",[v._v("声明数组类型的格式定义：")]),v._v(" "),t("p",[t("code",[v._v("[")]),v._v(" ( "),t("code",[v._v("<rs-expr>")]),v._v(" "),t("code",[v._v(",")]),v._v(" )*  "),t("code",[v._v("]")])]),v._v(" "),t("p",[v._v("其中，<rs-expr>是所谓的右侧表达式 - 该表达式可以出现在"),t("code",[v._v("=")]),v._v("(赋值)操作符的右侧。")]),v._v(" "),t("h3",[v._v("对象声明")]),v._v(" "),t("p",[v._v("对象声明允许定义(创建)内联对象。对象的声明是以"),t("code",[v._v(",")]),v._v("(逗号)或"),t("code",[v._v(";")]),v._v("(分号)分隔的，以"),t("code",[v._v("{")]),v._v("和"),t("code",[v._v("}")]),v._v("括起来的键-值对列表。每个键-值对以"),t("code",[v._v(":")]),v._v("(冒号)分隔：")]),v._v(" "),t("pre",{pre:!0},[t("code",[v._v('var obj = { one: 1, two: 2, three: "three", four:4 };\n')])]),v._v(" "),t("p",[v._v("如果键表示为一个名称标记，则它会被解释为一个标识符名称。因此，下面的语句：")]),v._v(" "),t("pre",{pre:!0},[t("code",[v._v('var obj = { #one: 1, #two: 2, #three: "three", #four:4 };\n')])]),v._v(" "),t("p",[v._v("和上面的语句是等价的。")]),v._v(" "),t("p",[v._v("如果在"),t("code",[v._v("{")]),v._v("后面第一个标记是"),t("code",[v._v(":")]),v._v("(冒号)，则会将该键名当做类名。这样可以在声明用户自定义类的对象：")]),v._v(" "),t("pre",{pre:!0},[t("code",[v._v('var myObj = {:MyClass one:1, two:2, three: "three", four:4 };\n')])]),v._v(" "),t("p",[v._v("声明对象的格式定义:")]),v._v(" "),t("p",[t("code",[v._v("{")]),v._v(" [ "),t("code",[v._v(":")]),v._v(" "),t("code",[v._v("<class-name>")]),v._v("  ] ( "),t("code",[v._v("<rs-expr>")]),v._v(" "),t("code",[v._v(":")]),v._v(" "),t("code",[v._v("<rs-expr>")]),v._v(" [ "),t("code",[v._v(",;")]),v._v(" ] )*  ( "),t("code",[v._v("<rs-expr>")]),v._v(" "),t("code",[v._v(":")]),v._v(" "),t("code",[v._v("<rs-expr>")]),v._v(" )?  "),t("code",[v._v("}")])]),v._v(" "),t("h3",[v._v("声明正则表达式")]),v._v(" "),t("p",[v._v("正则表达式是以"),t("code",[v._v("/")]),v._v("(斜杠)括起来的规则表达式序列:")]),v._v(" "),t("pre",{pre:!0},[t("code",[v._v("var re = /^[ \\t]*$/ ; // 匹配空行的正则表达式\n")])]),v._v(" "),t("p",[v._v("声明正则表达式的格式定义:")]),v._v(" "),t("p",[t("code",[v._v("/")]),v._v(" <re-expression> "),t("code",[v._v("/")]),v._v("["),t("code",[v._v("i")]),v._v("]["),t("code",[v._v("g")]),v._v("]")]),v._v(" "),t("p",[v._v("其中，"),t("em",[v._v("i")]),v._v("意味着大小写敏感匹配，"),t("em",[v._v("g")]),v._v('意味着启用"全局"匹配。当调用'),t("em",[v._v("RegExp.exec()")]),v._v("方法时，将返回所有匹配此装饰符，而不是第一个。")]),v._v(" "),t("h3",[v._v("元组(Tuple)声明")]),v._v(" "),t("p",[v._v("元组声明允许定义(创建)一个内联元组。元组的声明是在一个标识符后面跟着一个以"),t("code",[v._v("[")]),v._v("和"),t("code",[v._v("]")]),v._v("(方括号)括起来的以"),t("code",[v._v(",")]),v._v("(逗号)分隔的表达式初始化列表:")]),v._v(" "),t("pre",{pre:!0},[t("code",[v._v('var tup = #tupletag[ 1, 2, 3, "four", 5 ];\n')])]),v._v(" "),t("p",[v._v("在上面的语句中，"),t("em",[v._v("tup")]),v._v("变量获取了一个新定义的5元组(有5个元素)的引用。"),t("code",[v._v("tup.tag")]),v._v("属性将有"),t("code",[v._v("#tupletag")]),v._v("中的值。")]),v._v(" "),t("p",[v._v("任何在最后一个元素和"),t("code",[v._v("]")]),v._v("(闭合方括号)间的"),t("code",[v._v(",")]),v._v(" (逗号)都将会被忽略。因此，下面的声明是一个有效的元组声明：")]),v._v(" "),t("pre",{pre:!0},[t("code",[v._v('var tup = #tupletag[ 1, 2, 3, "four", 5, ];\n')])]),v._v(" "),t("p",[v._v("元组声明的格式定义:")]),v._v(" "),t("p",[t("code",[v._v("<symbol>")]),v._v(" "),t("code",[v._v("[")]),v._v(" ( "),t("code",[v._v("<rs-expr>")]),v._v(" "),t("code",[v._v(",")]),v._v(" )*  "),t("code",[v._v("]")])]),v._v(" "),t("p",[v._v("其中，<rs-expr>是所谓的右侧表达式 - 该表达式可以出现在"),t("code",[v._v("=")]),v._v("(赋值)操作符的右侧。")]),v._v(" "),t("h3",[v._v("宏(Macro)变量")]),v._v(" "),t("p",[v._v("有3个宏变量可以用于日志和调试目的:")]),v._v(" "),t("ul",[t("li",[t("code",[v._v("__FILE__")]),v._v(" - 当前文件的全路径;")]),v._v(" "),t("li",[t("code",[v._v("__FOLDER__")]),v._v(" - 当前目录的全路径;")]),v._v(" "),t("li",[t("code",[v._v("__LINE__")]),v._v(" - 当前文件中的行号;")]),v._v(" "),t("li",[t("code",[v._v("__TRACE__")]),v._v(" - 准确地说是一个说明，它创建了一个当前调用轨迹的快照作为一个三元向量。每个三元是一个有三个元素的向量:")]),v._v(" "),t("ul",[t("li",[t("code",[v._v("[0]")]),v._v(" - integer, 行号;")]),v._v(" "),t("li",[t("code",[v._v("[1]")]),v._v(" - symbol, 函数名;")]),v._v(" "),t("li",[t("code",[v._v("[2]")]),v._v(" - symbol, 文件名。")])])])])}),[],!1,null,null,null);_.default=r.exports}}]);