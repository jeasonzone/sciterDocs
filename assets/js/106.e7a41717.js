(window.webpackJsonp=window.webpackJsonp||[]).push([[106],{271:function(v,_,e){"use strict";e.r(_);var t=e(28),r=Object(t.a)({},(function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("h1",{attrs:{id:"stream-流"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#stream-流"}},[v._v("#")]),v._v(" Stream(流)")]),v._v(" "),e("dl",[e("h2",[v._v("属性")]),v._v(" "),e("dt",[v._v("isInput")]),v._v(" "),e("dd",[v._v("只读, "),e("em",[v._v("true")]),v._v(" | "),e("em",[v._v("false")]),v._v(" "),e("p",[v._v("报告该对象是否是输入流。")])]),v._v(" "),e("dt",[v._v("isOutput")]),v._v(" "),e("dd",[v._v("只读, "),e("em",[v._v("true")]),v._v(" | "),e("em",[v._v("false")]),v._v(" "),e("p",[v._v("报告该对象是否是输出流。")])]),v._v(" "),e("dt",[v._v("isPipe")]),v._v(" "),e("dd",[v._v("只读, "),e("em",[v._v("true")]),v._v(" | "),e("em",[v._v("false")]),v._v(" "),e("p",[v._v("报告该对象是否是管道流。")])]),v._v(" "),e("dt",[v._v("proxy")]),v._v(" "),e("dd",[e("em",[v._v("object")]),v._v(" | "),e("em",[v._v("null")]),v._v(" "),e("p",[v._v("(该属性仅对 管道流 有效)")]),v._v(" "),e("p",[v._v("获取/设置代理对象(此线程的远程端(其他线程)的代理)作为其他线程的线程接口。管道的每个实例只能有一个代理对象在其他管道端。所以双线程间的通行需要两个管道流。")])]),v._v(" "),e("dt",[v._v("pending")]),v._v(" "),e("dd",[v._v("只读, "),e("em",[v._v("integer")]),v._v(" "),e("p",[v._v("(该属性仅对 管道流 有效)")]),v._v(" "),e("p",[v._v("返回"),e("em",[v._v("post()")]),v._v("和"),e("em",[v._v("print**()")]),v._v("函数参数的待处理(当前尚未处理的)请求数量。")])]),v._v(" "),e("dt",[v._v("encoding")]),v._v(" "),e("dd",[v._v("读写 - gets/sets encoding used by the stream.\n          "),e("p",[v._v('目前，支持"utf-8"或"none"(内存字节流)编码。')])]),v._v(" "),e("dt",[v._v("name")]),v._v(" "),e("dd",[v._v("只读, "),e("em",[v._v("string")]),v._v(" "),e("p",[v._v("流的名称 - 数据来源的文件名或url。对于内存流，该属性可以为空字符串。")])]),v._v(" "),e("h2",[v._v("方法")]),v._v(" "),e("p",{staticClass:"note"},[v._v("Stream(流)对象没有公共构造函数，所以无法使用new操作符来创建它。"),e("br"),v._v("\n\t\t要创建流对象，请使用静态的open*** 方法。")]),v._v(" "),e("dt",[v._v("openFile")]),v._v(" "),e("dd",[e("p",[e("strong",[v._v("(")]),e("em",[v._v("file-name")]),v._v(" [,"),e("em",[v._v("mode")]),v._v("]"),e("strong",[v._v(") ")]),v._v(": "),e("em",[v._v("stream")]),v._v(" | "),e("em",[v._v("null")])]),v._v(" "),e("p",[v._v("静态方法。 打开"),e("em",[v._v("file-name")]),v._v("指定的文件并返回一个流对象。该操作允许根据"),e("em",[v._v("mode")]),v._v("参数字符串返回指定的流对象。")]),v._v(" "),e("p",[v._v("Script引擎使用C/C++运行时来打开文件流。见:"),e("a",{attrs:{href:"http://www.cplusplus.com/ref/cstdio/fopen.html",target:"_blank"}},[v._v("fopen函数定义")]),v._v("，里面有"),e("em",[v._v("mode")]),v._v("参数的含义。")])]),v._v(" "),e("dt",[v._v("openSocket")]),v._v(" "),e("dd",[e("p",[e("strong",[v._v("(")]),e("em",[v._v('"address:port" ')]),v._v("[,"),e("em",[v._v(" timeout")]),v._v("[, numberOfAttempts:1 ] ] "),e("strong",[v._v(")")]),v._v(" :  "),e("em",[v._v("stream")]),v._v(" | "),e("em",[v._v("null")])]),v._v(" "),e("p",[v._v("静态方法。根据"),e("em",[v._v("address-port")]),v._v(" 参数指定的地址和端口打开一个socket流并返回一个流对象实例。打开socket流对象处于读写模式。"),e("em",[v._v("Address")]),v._v(" 可以是域名也可以是IP地址。"),e("em",[v._v("address:port")]),v._v(" 的格式字符串是:"),e("font",{attrs:{color:"#006666"}},[v._v('"domain'),e("strong",[v._v(":")]),v._v('NNN"')]),v._v("或"),e("font",{attrs:{color:"#006666"}},[v._v('"NNN.NNN.NNN.NNN:NNN"')]),v._v("，其中N是十进制数字。"),e("em",[v._v("timeout")]),v._v("是等待这个socket的任何操作的超时秒数，如果在这个socket上的操作执行时间超过这个时间，运行系统将会产生一个异常。")],1),v._v(" "),e("p",[e("em",[v._v("numberOfAttempts")]),v._v("是一个整数 - 尝试连接的次数，默认为1。")]),v._v(" "),e("p",[v._v("示例: 下面的代码将会打印出terrainformatica.com服务器的http服务响应:")]),v._v(" "),e("pre",{pre:!0},[e("code",[e("font",{pre:!0,attrs:{color:"#0000cc"}},[v._v("var")]),v._v(" sock "),e("font",{pre:!0,attrs:{color:"#0000cc"}},[v._v("=")]),v._v(" "),e("em",[v._v("Stream")]),v._v("."),e("em",[v._v("openSocket")]),v._v("( "),e("font",{pre:!0,attrs:{color:"#006666"}},[v._v('"www.terrainformatica.com:80"')]),v._v(" , 5 "),e("font",{pre:!0,attrs:{color:"#339900"}},[v._v("/*超时时间(秒)*/")]),v._v(" );\n"),e("font",{pre:!0,attrs:{color:"#0000cc"}},[v._v("if")]),v._v("( !sock ) "),e("font",{pre:!0,attrs:{color:"#0000cc"}},[v._v("return")]),v._v(";\nsock.println("),e("font",{pre:!0,attrs:{color:"#006666"}},[v._v('"GET http://www.terrainformatica.com/main.whtm HTTP/1.0"')]),v._v(');\nsock.println("User-Agent: TIScript [en]");\nsock.println("");\n'),e("font",{pre:!0,attrs:{color:"#0000cc"}},[v._v("while")]),v._v("( "),e("font",{pre:!0,attrs:{color:"#0000cc"}},[v._v("true")]),v._v(" )\n{\n"),e("font",{pre:!0,attrs:{color:"#0000cc"}},[v._v("  var")]),v._v(" s = sock.readln();\n"),e("font",{pre:!0,attrs:{color:"#0000cc"}},[v._v("  if")]),v._v("(s == "),e("font",{pre:!0,attrs:{color:"#0000cc"}},[v._v("undefined")]),v._v(") "),e("font",{pre:!0,attrs:{color:"#0000cc"}},[v._v("break")]),v._v(";\n"),e("font",{pre:!0,attrs:{color:"#0000cc"}},[v._v("  stdout")]),v._v(".println(s);\n}\n")],1)])]),v._v(" "),e("dt",[v._v("openString")]),v._v(" "),e("dd",[e("div",[e("strong",[v._v("(")]),v._v("["),e("em",[v._v("initialSize")]),v._v(":int | "),e("em",[v._v("initialValue")]),v._v(":string]"),e("strong",[v._v(") :")]),v._v(" "),e("em",[v._v("stream")])]),v._v(" "),e("p",[v._v("静态方法。打开一个内存字符串输出流并初始化它的缓存为"),e("em",[v._v("initialSize (integer)")]),v._v("。字符串流用于当你计划频繁更新一些字符串或组合许多字符串时。字符串流相当于Java或.NET中的StringBuffer/StringBuilder。为了获取当前字符串流的内容，请使用它的"),e("em",[v._v("toString")]),v._v("方法。")])]),v._v(" "),e("dt",[v._v("openPipe")]),v._v(" "),e("dd",[e("div",[v._v("( ["),e("em",[v._v("receiver")]),v._v(": function [, "),e("em",[v._v("proxy")]),v._v(": object]] ) : "),e("em",[v._v("stream")])]),v._v(" "),e("p",[v._v("静态方法。创建一个管道 - 用于线程间的通信流。管道在两个通信线程中共享。见"),e("em",[v._v("send()")]),v._v("、"),e("em",[v._v("post()")]),v._v("方法和"),e("em",[v._v("pending")]),v._v("、"),e("em",[v._v("proxy")]),v._v(" 属性。")]),v._v(" "),e("p",[e("em",[v._v("receiver")]),v._v("参数时一个函数，它的签名为: "),e("code",[v._v("function recv(value)")]),v._v("。当管道另一端使用print()、println()、printf()方法打印的数据到达这一端时，"),e("em",[v._v("receiver")]),v._v("方法会被调用。")]),v._v(" "),e("p",[e("em",[v._v("proxy")]),v._v("对象是管道另一端的线程(VM)在当前端的函数访问接口。见下面的"),e("em",[v._v("send() ")]),v._v("和"),e("em",[v._v("post() ")]),v._v("方法。")]),v._v(" "),e("p",[v._v("例如, 下面的代码片段(来自ScIDE/facades.tis)创建了3个管道，它们被作为另一端VM(其他在独立线程中运行的ScIDE窗口)的输入(stdin)、输出(stdout)和错误(stderr)流:")]),v._v(" "),e("pre",{pre:!0},[e("code",[v._v("  "),e("code",[v._v("function")]),v._v(" receiverOut(data) { Log.print(data,false); }\n  "),e("code",[v._v("function")]),v._v(" receiverErr(data) { Log.print(data,true); }\n  // 回调接口\n  "),e("code",[v._v("var")]),v._v(" iface =\n  {\n    foo: "),e("code",[v._v("function")]),v._v("(v1,v2) { stdout.printf(\"got a call of 'foo' with %V,%V\\n\",v1,v2); "),e("code",[v._v("return")]),v._v(" v1 + v2; }\n  };\n  view.open(f,\n      Stream.openPipe( null, iface ), // 调用外来接口\n      Stream.openPipe( receiverOut ), // 输出流\n      Stream.openPipe( receiverErr )  // 错误流\n  );\n")])])]),v._v(" "),e("dt",[v._v("toString")]),v._v(" "),e("dd",[e("p",[e("strong",[v._v("( ) ")]),v._v(":  "),e("em",[v._v("string")])]),v._v(" "),e("p",[v._v("如果该对象是字符串流，则返回字符串缓存区的内容。如果该对象是 文件/socket 流，则返回 文件名/地址。")])]),v._v(" "),e("dt",[v._v("close")]),v._v(" "),e("dd",[e("p",[e("strong",[v._v("( ")]),v._v("["),e("em",[v._v("returnString")]),v._v(":true|false]"),e("strong",[v._v(" )")]),v._v(" : "),e("em",[v._v("string | true | false")])]),v._v(" "),e("p",[v._v("关闭该流 - 文件、socket或字符串流缓冲区。如果"),e("em",[v._v("returnString")]),v._v("为"),e("em",[v._v("true")]),v._v("，则返回"),e("em",[v._v("toString()")]),v._v("方法的结果值。")])]),v._v(" "),e("dt",[v._v("print")]),v._v(" "),e("dd",[e("div",[e("strong",[v._v("( ")]),e("em",[v._v("string")]),e("strong",[v._v(" ) ")]),v._v(":"),e("strong"),e("em",[v._v("true")]),v._v(" | "),e("em",[v._v("false")])]),v._v(" "),e("p",[v._v("将"),e("em",[v._v("string")]),v._v("输出到流中。")]),v._v(" "),e("p",[v._v("print等价于: "),e("em",[v._v("stream << string")]),v._v("; 操作。")])]),v._v(" "),e("dt",[v._v("$")]),v._v(" "),e("dd",[e("div",[v._v("( ... ) :"),e("strong"),e("em",[v._v("true")]),v._v(" | "),e("em",[v._v("false")])]),v._v(" "),e("p",[v._v("字符串器函数, 将括号内的内容输出到流中。")])]),v._v(" "),e("dt",[v._v("println")]),v._v(" "),e("dd",[e("div",[e("strong",[v._v("( ")]),e("em",[v._v("string")]),e("strong",[v._v(" ) ")]),v._v(":"),e("strong"),e("em",[v._v("true")]),v._v(" | "),e("em",[v._v("false")])]),v._v(" "),e("p",[v._v("在"),e("em",[v._v("string")]),v._v("结尾附加\\r\\n，然后输出到流中。")])]),v._v(" "),e("dt",[v._v("$n")]),v._v(" "),e("dd",[e("div",[e("strong",[v._v("( ")]),e("em",[v._v("string")]),e("strong",[v._v(" ) ")]),v._v(":"),e("strong"),e("em",[v._v("true")]),v._v(" | "),e("em",[v._v("false")])]),v._v(" "),e("p",[v._v("字符串器函数, 将括号内的内容结尾附加\\r\\n，然后输出到流中。")])]),v._v(" "),e("dt",[v._v("printf")]),v._v(" "),e("dd",[e("div",[e("strong",[v._v("(")]),v._v(" "),e("em",[v._v("format")]),v._v(":string, ["),e("a",[v._v("value1")]),v._v("[, value2[, "),e("a",[v._v("...")]),v._v("[, "),e("a",[v._v("valueN")]),v._v("]]]]"),e("strong",[v._v(")")]),v._v(" : "),e("em",[v._v("true")]),v._v(" | "),e("em",[v._v("false")])]),v._v(" "),e("p",[v._v("根据"),e("a",{attrs:{href:"http://www.cplusplus.com/ref/cstdio/printf.html",target:"_blank"}},[v._v("printf C/C++ 函数")]),v._v("规则打印格式化字符串。")]),v._v(" "),e("div",[v._v("另外添加的格式类型:")]),v._v(" "),e("ul",[e("p",[e("strong",[v._v("%v")]),v._v("和"),e("strong",[v._v("%V")]),v._v(' - 该格式接受任何类型的值作为参数，并且生成源代码格式以便接下来使用eval()方法。所以如果参数是一个数组则它会输出为"[element1, element2, element3... elementN]"，而如果它是一个对象(Object类的实例)则它会输出为"{key1:value1, key2:value2,..., keyN:valueN}"。 %v产生单行输出，而%V会尝试生成人易阅读的输出(包含换行和缩进)。'),e("br"),v._v("\n\t\t它使用在当你需要在AJAX/JSION中序列化对象时。")]),v._v(" "),e("p",[e("strong",[v._v("%S")]),v._v(" - 将对应的参数转换成字符串，并将其中的"),e("em",[v._v("HTML转义字符")]),v._v("进行转义。所以像'<'字符在输出中将会转换为\"&lt;\"。")])])]),v._v(" "),e("dt",[v._v("scanf")]),v._v(" "),e("dd",[e("div",[e("strong",[v._v("( ")]),e("em",[v._v("format")]),v._v(": string "),e("strong",[v._v(")")]),v._v(" : array")]),v._v(" "),e("p",[v._v("浏览字符串并查找满足"),e("a",{attrs:{href:"http://www.cplusplus.com/reference/clibrary/cstdio/scanf.html"}},[v._v("scanf C/C++ 函数")]),v._v("规则的值。该函数扩展了原有的通配符(类似%[a-z])。见"),e("a",{attrs:{href:"http://msdn.microsoft.com/en-us/library/xdb9w69d(VS.71).aspx"}},[v._v("scanf in MSDN")]),v._v("定义。")]),v._v(" "),e("p",[v._v("另外添加的格式类型:")]),v._v(" "),e("ul",[e("p",[e("strong",[v._v("%N")]),v._v(" - 浏览浮点或整数。")])]),v._v(" "),e("p",[v._v("该函数返回成功解析的值的数组。")])]),v._v(" "),e("dt",[v._v("putc")]),v._v(" "),e("dd",[e("div",[e("strong",[v._v("( ")]),e("em",[v._v("char-code")]),e("strong",[v._v(" ) ")]),v._v(":"),e("strong"),e("em",[v._v("true")]),v._v(" | "),e("em",[v._v("false")])]),v._v(" "),e("p",[v._v("输出"),e("em",[v._v("char-code ")]),v._v("字符到流中。字符有它的整数代码来定义。")]),v._v(" "),e("p",[v._v("putc 等价于: "),e("em",[v._v("stream << charcode")]),v._v("; 操作。")])]),v._v(" "),e("dt",[v._v("getc")]),v._v(" "),e("dd",[e("div",[e("strong",[v._v("( ) ")]),v._v(":"),e("strong"),e("em",[v._v("integer")]),v._v(" | "),e("em",[v._v("undefined")])]),v._v(" "),e("p",[v._v("从流中读取一个字符。返回该字符整数代码。如果流被关闭或获取到EOF，则返回"),e("em",[v._v("undefined ")]),v._v("。")])]),v._v(" "),e("dt",[v._v("readln")]),v._v(" "),e("dd",[e("div",[e("strong",[v._v("( ) ")]),v._v(":"),e("strong"),e("em",[v._v("string")]),v._v(" | "),e("em",[v._v("undefined")])]),v._v(" "),e("p",[v._v("从流中读取一行(直到遇到'\\n')字符序列。读取的字符结尾无'\\r'和'\\n'。")])]),v._v(" "),e("dt",[v._v("send")]),v._v(" "),e("dd",[e("div",[v._v("("),e("em",[v._v("methodName")]),v._v(": symbol [, .. ] ) : "),e("em",[v._v("value")])]),v._v(" "),e("p",[v._v("(该方法仅对 管道流 有效)")]),v._v(" "),e("p",[v._v("发送请求到管道的另一端的代理接口对象并等待它执行完成。返回远程方法的结果。"),e("em",[v._v("methodName")]),v._v("参数后面的参数将被传递给远程方法作为正常方法。")])]),v._v(" "),e("dt",[v._v("post")]),v._v(" "),e("dd",[e("div",[v._v("("),e("em",[v._v("methodName")]),v._v(": symbol [, .. ] ) : "),e("em",[v._v("undefined")])]),v._v(" "),e("p",[v._v("(该方法仅对 管道流 有效)")]),v._v(" "),e("p",[v._v("发送请求到管道的另一端的代理接口对象并无需等待远程方法执行完成，它之后增加"),e("em",[v._v("待处理")]),v._v("计数。em>methodName"),v._v("参数后面的参数将被传递给远程方法作为正常方法。")])])])])}),[],!1,null,null,null);_.default=r.exports}}]);