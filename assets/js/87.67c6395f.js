(window.webpackJsonp=window.webpackJsonp||[]).push([[87],{274:function(v,_,e){"use strict";e.r(_);var r=e(28),t=Object(r.a)({},(function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("h1",{attrs:{id:"array-数组"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#array-数组"}},[v._v("#")]),v._v(" Array(数组)")]),v._v(" "),e("p",[v._v("代表一些值的索引向量(数组)。")]),v._v(" "),e("dl",[e("h2",[v._v("属性")]),v._v(" "),e("dt",[v._v("length")]),v._v(" "),e("dd",[v._v("- "),e("em",[v._v("integer")]),v._v(", 读/写属性。数组中项的数量。")]),v._v(" "),e("dt",[v._v("[index]")]),v._v(" "),e("dd",[e("strong",[v._v("- ")]),e("em",[v._v("value")]),v._v(", 读/写属性。数组中在"),e("em",[v._v("index")]),v._v("索引位置的元素，索引基于0开始。")]),v._v(" "),e("dt",[v._v("[begin..end]")]),v._v(" "),e("dd",[e("strong",[v._v("- ")]),e("em",[v._v("integers")]),v._v(", begin和end索引基于0，表示一段范围。返回数组中一个从"),e("em",[v._v("start")]),v._v("索引(包含)开始到"),e("em",[v._v("end")]),v._v("索引(不包含)结束的子数组。"),e("em",[v._v("Begin")]),v._v("和"),e("em",[v._v("end")]),v._v("参数是可忽略的。如果begin被忽略，则会假设begin为0，如果end被忽略，则会假设end值为"),e("em",[v._v("length")]),v._v("。")]),v._v(" "),e("dt",[v._v("first")]),v._v(" "),e("dd",[v._v("- "),e("em",[v._v("value")]),v._v(" | "),e("em",[v._v("undefined")]),v._v(", 数组的第一个元素(如果存在)。")]),v._v(" "),e("dt",[v._v("last")]),v._v(" "),e("dd",[v._v("- "),e("em",[v._v("value")]),v._v(" | "),e("em",[v._v("undefined")]),v._v(", 数组的最后一个元素(如果存在)。")]),v._v(" "),e("h2",[v._v("方法")]),v._v(" "),e("dt",[v._v("Array")]),v._v(" "),e("dd",[e("strong",[v._v("([value1 [, value2 [, ... valueN ]]])")]),v._v(" "),e("p",[v._v("根据所给的参数创建一个新数组对象。用法如下："),e("br"),v._v("\n\t  var a = new Array(...);")])]),v._v(" "),e("dt",[v._v("toLocaleString")]),v._v(" "),e("dd",[e("div",[e("strong",[v._v("()")]),v._v(" returns: string")]),v._v(" "),e("p",[v._v("Returns string - 逗号分隔的值列表。")])]),v._v(" "),e("dt",[v._v("toString")]),v._v(" "),e("dd",[e("div",[e("strong",[v._v("()")]),v._v(" returns: string")]),v._v(" "),e("p",[v._v("Returns string - 逗号分隔的值列表。")])]),v._v(" "),e("dt",[v._v("valueOf")]),v._v(" "),e("dd",[e("div",[e("strong",[v._v("()")]),v._v(" returns: string")]),v._v(" "),e("p",[v._v("同"),e("em",[v._v("toString")]),v._v(".")])]),v._v(" "),e("dt",[v._v("clone")]),v._v(" "),e("dd",[e("div",[e("strong",[v._v("(")]),v._v("[deep:true]"),e("strong",[v._v(") ")]),v._v("returns: array")]),v._v(" "),e("p",[v._v("返回一个该数组的新拷贝。如果"),e("em",[v._v("deep")]),v._v(" === true，则该函数会递归，进行深克隆。")])]),v._v(" "),e("dt",[v._v("push")]),v._v(" "),e("dd",[e("div",[e("strong",[v._v("([value1 [, value2 [, ... valueN ]]])")]),v._v(" returns: value")]),v._v(" "),e("p",[v._v("将参数中的值都添加到数组末尾。返回最后一个插入的元素。")])]),v._v(" "),e("dt",[v._v("shift")]),v._v(" "),e("dd",[e("div",[e("strong",[v._v("()")]),v._v(" returns: value | undefined")]),v._v(" "),e("p",[v._v("移除数组中的第一个元素，返回移除的元素。")])]),v._v(" "),e("dt",[v._v("pop")]),v._v(" "),e("dd",[e("div",[e("strong",[v._v("()")]),v._v(" returns: value | undefined")]),v._v(" "),e("p",[v._v("移除数组中的最后一个元素，返回移除的元素。")])]),v._v(" "),e("dt",[v._v("unshift")]),v._v(" "),e("dd",[e("div",[e("strong",[v._v("(value)")]),v._v(" returns: value | undefined")]),v._v(" "),e("p",[v._v("将value插入到数组中的第一个位置。返回该插入的元素。")])]),v._v(" "),e("dt",[v._v("concat")]),v._v(" "),e("dd",[e("div",[e("strong",[v._v("([value1 [, value2 [, ... valueN ]]]) ")]),v._v("returns: array")]),v._v(" "),e("p",[v._v("将参数中的值添加到数组中。返回该数组。")])]),v._v(" "),e("dt",[v._v("join")]),v._v(" "),e("dd",[e("div",[e("strong",[v._v("([delimeter])")]),v._v(" returns: string")]),v._v(" "),e("p",[v._v("返回该数组中所有元素的字符串，这些字符串以"),e("em",[v._v("delimeter")]),v._v("或逗号分隔。")])]),v._v(" "),e("dt",[v._v("reverse")]),v._v(" "),e("dd",[e("div",[e("strong",[v._v("()")]),v._v(" returns: array")]),v._v(" "),e("p",[v._v("反转该数组中的元素顺序。返回该数组。")])]),v._v(" "),e("dt",[v._v("slice")]),v._v(" "),e("dd",[e("div",[e("strong",[v._v("(start[, end])")]),v._v(" returns: array | undefined")]),v._v(" "),e("p",[v._v("返回数组中一个从"),e("em",[v._v("start")]),v._v("索引(包含)开始到"),e("em",[v._v("end")]),v._v("索引(不包含)结束的子数组。")])]),v._v(" "),e("dt",[v._v("splice")]),v._v(" "),e("dd",[e("div",[e("strong",[v._v("(index, count [, element1, element2, ...] )")]),v._v(" returns: array ")]),v._v(" "),e("p",[v._v("该函数: ")]),v._v(" "),e("ol",[e("li",[v._v("从"),e("em",[v._v("index")]),v._v("索引开始移除"),e("em",[v._v("count")]),v._v("个元素；")]),v._v(" "),e("li",[v._v("从"),e("em",[v._v("index")]),v._v("索引开始插入element1、element2、...个元素；")]),v._v(" "),e("li",[v._v("将移除的元素作为一个数组返回。如果"),e("em",[v._v("count")]),v._v("为0，将会返回一个空数组。")])])]),v._v(" "),e("dt",[v._v("sort")]),v._v(" "),e("dd",[e("div",[e("strong",[v._v("( [compareFunction] )")]),v._v(" returns: array")]),v._v(" "),e("p",[v._v("对数组中的元素进行递增排序。如果提供了"),e("em",[v._v("compareFunction")]),v._v("参数，则在排序中使用compareFunction来比较元素。 "),e("em",[v._v("compareFunction")]),v._v("函数参数中应该接受两个值，并且返回-1、0、+1作为结果。")])]),v._v(" "),e("dt",[v._v("indexOf")]),v._v(" "),e("dd",[e("div",[e("strong",[v._v("( ")]),e("em",[v._v("value")]),v._v(" [, "),e("em",[v._v("notfound")]),v._v(" = -1] "),e("strong",[v._v(")")]),v._v(" returns: int | "),e("em",[v._v("notfound")])]),v._v(" "),e("p",[v._v("获取"),e("em",[v._v("value")]),v._v("在数组中的索引位置。如果"),e("em",[v._v("value")]),v._v("在数组中未找到，则返回"),e("em",[v._v("notfound")]),v._v("值(默认为-1)。")])]),v._v(" "),e("dt",[v._v("lastIndexOf")]),v._v(" "),e("dd",[e("div",[e("strong",[v._v("( ")]),e("em",[v._v("value")]),v._v(" [, "),e("em",[v._v("notfound")]),v._v(" = -1] "),e("strong",[v._v(")")]),v._v(" returns: int | "),e("em",[v._v("notfound")])]),v._v(" "),e("p",[v._v("获取"),e("em",[v._v("value")]),v._v("在数组中的最后一个索引位置。如果"),e("em",[v._v("value")]),v._v("在数组中未找到，则返回"),e("em",[v._v("notfound")]),v._v("值(默认为-1)。")])]),v._v(" "),e("dt",[v._v("remove")]),v._v(" "),e("dd",[e("div",[e("strong",[v._v("( ")]),e("em",[v._v("index")]),v._v(":int "),e("strong",[v._v(") ")]),v._v("returns: value | nothing")]),v._v(" "),e("p",[v._v("移除数组中在"),e("em",[v._v("index")]),v._v("位置的元素。返回移除的元素。")])]),v._v(" "),e("dt",[v._v("removeByValue")]),v._v(" "),e("dd",[e("div",[e("strong",[v._v("( ")]),e("em",[v._v("value")]),v._v(" "),e("strong",[v._v(") ")]),v._v("returns: value | nothing")]),v._v(" "),e("p",[v._v("尝试根据"),e("em",[v._v("value")]),v._v("在数组中定位元素并移除它。返回移除的元素。")])]),v._v(" "),e("dt",[v._v("map")]),v._v(" "),e("dd",[e("div",[e("strong",[v._v("(")]),v._v(" "),e("em",[v._v("callback")]),v._v(": function [, "),e("em",[v._v("thisObject")]),v._v("] "),e("strong",[v._v(")")]),v._v(" : array")]),v._v(" "),e("p",[v._v("该函数创建一个新数组，该数组中的元素为原数组中为每个元素调用"),e("em",[v._v("callback")]),v._v("函数后的结果集。如果"),e("em",[v._v("thisObject")]),v._v("参数被提供，则该对象作为callback函数中的"),e("em",[v._v("this")]),v._v("变量。")]),v._v(" "),e("p",[v._v("该callback函数接受两个参数: "),e("code",[v._v("callback(currentValue, index, array)")]),v._v(" 其中:")]),v._v(" "),e("ul",[e("li",[e("em",[v._v("currentValue")]),v._v(" 是在"),e("em",[v._v("index")]),v._v("位置的数组元素的值;")]),v._v(" "),e("li",[e("em",[v._v("array")]),v._v(" 是该callback函数访问的数组。")])]),v._v(" "),e("p",[e("em",[v._v("map")]),v._v("方法被调用中"),e("span",{staticClass:"Apple-converted-space"}),v._v("不会修改原数组。")]),v._v(" "),e("p",[v._v("如果callback函数结尾没有返回(即没有显示的return语句)，则该元素将不会添加到结果数组中(相当于下面的filter()方法返回false)。注意: 这里的filter()行为不是标准的。")]),v._v(" "),e("p",[v._v("示例:")]),v._v(" "),e("pre",{pre:!0},[e("code",[v._v("var numbers = [1, 2, 3];\nvar squares = numbers.map(:el:el*el); // 创建一个新数组\n// 这时，squares数组中的数据为[1, 4, 9]。\n")])])]),v._v(" "),e("dt",[v._v("reduce")]),v._v(" "),e("dd",[e("p",[e("strong",[v._v("(")]),v._v(" callback:function [, initialValue] "),e("strong",[v._v(")")]),v._v(" : value")]),v._v(" "),e("p",[v._v("该方法应用callback函数到数组上，callback用于比较数组中的两个值(从左到右)并最终减少到一个值。")]),v._v(" "),e("p",[v._v("callback函数接受以下参数: "),e("code",[v._v("callback(previousValue, currentValue, index, array)")]),v._v(" 其中:")]),v._v(" "),e("ul",[e("li",[e("em",[v._v("previousValue")]),v._v(" 或者称作"),e("em",[v._v("initialValue")]),v._v(" (在第一次运行) 或者是 上一次运行callback的结果;")]),v._v(" "),e("li",[e("em",[v._v("currentValue")]),v._v(" 是在"),e("em",[v._v("index")]),v._v("位置的数组元素的值;")]),v._v(" "),e("li",[e("em",[v._v("array")]),v._v(" 是该callback函数访问的数组。")])]),v._v(" "),e("p",[v._v("该方法返回"),e("em",[v._v("callback")]),v._v("最后一次调用的返回值。")]),v._v(" "),e("p",[v._v("该方法被调用中"),e("span",{staticClass:"Apple-converted-space"}),v._v("不会修改原数组。")]),v._v(" "),e("p",[v._v("如, 下面的代码片段将会计算出数组中所有元素的总和:")]),v._v(" "),e("pre",{pre:!0},[e("code",[v._v("var total = [0, 1, 2, 3].reduce( :a, b: a + b );\n// 此时total值为6。\n")])])]),v._v(" "),e("dt",[v._v("filter")]),v._v(" "),e("dd",[e("p",[e("strong",[v._v("(")]),v._v(" "),e("em",[v._v("callback")]),v._v(": function [, "),e("em",[v._v("thisObject")]),v._v("] "),e("strong",[v._v(")")]),v._v(" : array")]),v._v(" "),e("p",[v._v("该方法为数组中的每个元素调用一次"),e("em",[v._v("callback")]),e("span",{staticClass:"Apple-converted-space"}),v._v("函数，并且创建一个新数组，该新数组包含"),e("em",[v._v("callback")]),v._v("返回"),e("em",[v._v("true")]),v._v("的元素。callback函数可以结束下面的参数: "),e("code",[v._v("callback(currentValue, index, array)")]),v._v(" 其中")]),v._v(" "),e("ul",[e("li",[e("em",[v._v("currentValue")]),v._v(" 是在"),e("em",[v._v("index")]),v._v("位置的数组元素的值;")]),v._v(" "),e("li",[e("em",[v._v("array")]),v._v(" 是该callback函数访问的数组。")])]),v._v(" "),e("p",[e("em",[v._v("filter")]),v._v("方法被调用中"),e("span",{staticClass:"Apple-converted-space"}),v._v("不会修改原数组。")]),v._v(" "),e("p",[v._v("例如, 下面的代码将会从原数组中的大于10的元素创建一个新数组:")]),v._v(" "),e("pre",{pre:!0},[e("code",[v._v("var filtered = [12, 5, 8, 130, 44].filter(:el: el > 10);\n// filtered此时为[12, 130, 44]\n")])])]),v._v(" "),e("dt",[v._v("find")]),v._v(" "),e("dd",[e("strong",[v._v("( ")]),e("b",[v._v("predicate")]),v._v(":function [, "),e("b",[v._v("thisArg")]),v._v(": object]"),e("strong",[v._v(" )")]),v._v(" : (index:integer, element: any)\n      "),e("p",[v._v("为数组中的每个元素调用predicate"),e("i",[v._v("函数")]),v._v('指导返回"truthy"值。返回值为找到的元素。')]),v._v(" "),e("p",[v._v("predicate的函数签名如下: ")]),v._v(" "),e("p",[e("code",[v._v("function (element:any [, index:integer [, arr: array ]] ) : true | false")])]),v._v(" "),e("p",[v._v("其中: ")]),v._v(" "),e("ul",[e("li",[e("i",[v._v("element")]),v._v(" - 数组中的当前元素;")]),v._v(" "),e("li",[e("i",[v._v("index")]),v._v(" - 数组中的当前元素的索引")]),v._v(" "),e("li",[e("i",[v._v("arr")]),v._v(" - 该数组的引用。")])]),v._v(" "),e("p",[v._v("如果指定了"),e("i",[v._v("thisArg")]),v._v("参数，则它将作为predicate函数中的"),e("i",[v._v("this")]),v._v("变量。")]),v._v(" "),e("p",[v._v("该函数返回找到的索引及元素，所以你可以这样用:")]),v._v(" "),e("pre",{pre:!0},[e("code",[v._v('var (i,v) = someArr.find(:el: el.id == "foo" ); // value and index, or\nvar v = someArr.find(:el: el.id == "foo" ); // just value')])])]),v._v(" "),e("dt",[v._v("some")]),v._v(" "),e("dd",[e("strong",[v._v("( ")]),e("b",[v._v("predicate")]),v._v(":function [, "),e("b",[v._v("thisArg")]),v._v(": object]"),e("strong",[v._v(" )")]),v._v(" :  true | false \n      "),e("p",[v._v("为数组中的每个元素调用predicate"),e("i",[v._v("函数")]),v._v('指导返回"truthy"值。当找到元素时返回值为'),e("i",[v._v("true")]),v._v("。如果没有找到，则返回"),e("i",[v._v("false")]),v._v("。")]),v._v(" "),e("p",[v._v("predicate的函数签名如下: ")]),v._v(" "),e("p",[e("code",[v._v("function (element:any [, index:integer [, arr: array ]] ) : true | false")])]),v._v(" "),e("p",[v._v("其中: ")]),v._v(" "),e("ul",[e("li",[e("i",[v._v("element")]),v._v(" - 数组中的当前元素;")]),v._v(" "),e("li",[e("i",[v._v("index")]),v._v(" - 数组中的当前元素的索引")]),v._v(" "),e("li",[e("i",[v._v("arr")]),v._v(" - 该数组的引用。")])]),v._v(" "),e("p",[v._v("如果指定了"),e("i",[v._v("thisArg")]),v._v("参数，则它将作为predicate函数中的"),e("i",[v._v("this")]),v._v("变量。")])]),v._v(" "),e("dt",[v._v("every")]),v._v(" "),e("dd",[e("strong",[v._v("( ")]),e("b",[v._v("predicate")]),v._v(":function [, "),e("b",[v._v("thisArg")]),v._v(": object]"),e("strong",[v._v(" )")]),v._v(" :  true | false \n    "),e("p",[v._v(" 为数组中的每个元素调用predicate"),e("i",[v._v("函数")]),v._v('指导返回"truthy"值。，当所有元素调用predicate都返回true时，则返回值为true，否则返回值为false。')]),v._v(" "),e("p",[v._v("predicate的函数签名如下: ")]),v._v(" "),e("p",[e("code",[v._v("function (element:any [, index:integer [, arr: array ]] ) : true | false")])]),v._v(" "),e("p",[v._v("其中: ")]),v._v(" "),e("ul",[e("li",[e("i",[v._v("element")]),v._v(" - 数组中的当前元素;")]),v._v(" "),e("li",[e("i",[v._v("index")]),v._v(" - 数组中的当前元素的索引")]),v._v(" "),e("li",[e("i",[v._v("arr")]),v._v(" - 该数组的引用。")])]),v._v(" "),e("p",[v._v("如果指定了"),e("i",[v._v("thisArg")]),v._v("参数，则它将作为predicate函数中的"),e("i",[v._v("this")]),v._v("变量。")])]),v._v(" "),e("dt",[v._v("addObserver")]),v._v(" "),e("dd",[e("strong",[v._v("( observer")]),v._v(":function"),e("strong",[v._v(" )")]),v._v(" : undefined\n      "),e("p",[v._v("为该数组添加观察器(observer) - 观察器是一个函数，当数组修改时会调用该函数。该观察器函数的签名应该为:")]),v._v(" "),e("p",[e("code",[v._v("function observer(changeDefinition) {}")]),v._v(" 其中changeDefinition是一个元组，它包含以下字段:")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("[0]")]),v._v(" - symbol, "),e("code",[v._v("#add-range")]),v._v("(属性增加)、"),e("code",[v._v("#update-range")]),v._v("(属性修改)、"),e("code",[v._v("#delete-range")]),v._v("(属性删除)中之一;")]),v._v(" "),e("li",[e("code",[v._v("[1]")]),v._v(" - array, 属性被修改的数组;")]),v._v(" "),e("li",[e("code",[v._v("[2]")]),v._v(" - symbol or string, 属性名;")]),v._v(" "),e("li",[e("code",[v._v("[3]")]),v._v(" - integer, 范围起始，第一个被修改元素的索引;")]),v._v(" "),e("li",[e("code",[v._v("[4]")]),v._v(" - integer, 范围结束(不包含)。")])])]),v._v(" "),e("dt",[v._v("removeObserver")]),v._v(" "),e("dd",[e("strong",[v._v("( observer")]),v._v(":function"),e("strong",[v._v(" )")]),v._v(" : undefined\n      "),e("p",[v._v("根据函数引用从中移除给定的观察器。")])])])])}),[],!1,null,null,null);_.default=t.exports}}]);