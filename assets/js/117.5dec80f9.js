(window.webpackJsonp=window.webpackJsonp||[]).push([[117],{269:function(t,e,s){"use strict";s.r(e);var n=s(28),r=Object(n.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"类和名称空间"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类和名称空间"}},[t._v("#")]),t._v(" 类和名称空间")]),t._v(" "),s("p",[s("strong",[t._v("namespace")]),t._v("用于声明一个新的名称空间。一个名称空间是一个函数、类、变量等聚合到一个单元的集合。名称空间也可以包含其他(内部)名称空间. 在内部，一个名称空间实际上是一个命名全局对象。 super关键字可以用于方法父名称空间的成员——在内部名称空间有相同名称的。")]),t._v(" "),s("p",[t._v("名称空间的声明:")]),t._v(" "),s("pre",{pre:!0,attrs:{class:"code tiscript"}},[s("code",[s("code",[t._v("namespace")]),t._v(" <名称>\n"),s("code",[t._v("{")]),t._v("  [ <function> | <var> | <const> | <class> | <namespace> ]*\n"),s("code",[t._v("}\n")])])]),t._v(" "),s("h1",[s("a",{attrs:{name:"classes",id:"classes"}},[t._v("类")])]),t._v(" "),s("p",[s("strong",[t._v("class")]),t._v("用于定义一个新的类(对象的类型):")]),t._v(" "),s("pre",{pre:!0,attrs:{class:"code tiscript"}},[s("code",[t._v("class <类名> [ : <父类名> ]\n{\n  [ <function> | <constructor> | <property> | <var> | <const> | <this var> | <class> ]*\n}\n")])]),t._v(" "),s("dl",[s("dt",[t._v("其中:")]),t._v(" "),s("dd",[s("code",[t._v("<function>")]),t._v(" 函数，是一个标准的函数声明。这样的函数可以被类的示例或静态方法使用。"),s("br"),t._v(" "),s("code",[t._v("<constructor>")]),t._v(" 构造函数，是一个名称为this的函数。"),s("br"),t._v(" "),s("code",[t._v("<property>")]),t._v(" 属性，是一个特定类型的成员函数。参见下面的内容。"),s("br"),t._v(" "),s("code",[t._v("<var>")]),t._v(" 变量，是一个标准的var声明——允许定义类或模块变量(又名静态变量)。"),s("br"),t._v(" "),s("code",[t._v("<const>")]),t._v(" 常量，是一个命名常量的声明。"),s("br"),t._v(" "),s("code",[t._v("<class>")]),t._v(" 类，是一个内部类的声明。"),s("br"),t._v(" "),s("code",[t._v("<this var>")]),t._v(" 成员变量, 是一个成员变量的声明:"),s("br"),t._v("      "),s("code",[t._v("this var <name> [= <value>] [, <name> = <value> , ...];")])])]),t._v(" "),s("h2",[s("a",{attrs:{name:"constructors",id:"constructors"}},[t._v("构造函数")])]),t._v(" "),s("p",[t._v("该函数的名称为this, 在类的上下文中声明，作为该类的所有实例的函数-构造器:")]),t._v(" "),s("pre",{pre:!0,attrs:{class:"code tiscript"}},[s("code",[t._v("class Tor\n{\n  "),s("code",[t._v("this var")]),t._v(" one = 1; // 声明一个成员变量\n  "),s("code",[t._v("function")]),t._v(" "),s("code",[t._v("this")]),t._v("() { "),s("code",[t._v("this")]),t._v(".two = 2; } // 构造器\n}\n")])]),t._v(" "),s("p",[t._v("构造函数的主要目标是用来初始化一个类(又名对象)的新实例。它通过创建和初始化实例将包含的所有字段。在构造函数中可以使用名称为this的变量来方法被创建的对象1)。编译器在处理完成new操作符后调用构造函数:")]),t._v(" "),s("p",[t._v("�������ڴ������new����������ù��캯��:")]),t._v(" "),s("pre",{pre:!0,attrs:{class:"code tiscript"}},[s("code",[t._v("var tor = new Tor();\n//  tor.one == 1 并且\n//  tor.two == 2 \n")])]),t._v(" "),s("p",[t._v("在其他情况下, "),s("code",[t._v("function this()")]),t._v("是一个普通函数，它也可以定义一些参数, 包括"),s("a",{staticClass:"wikilink1",attrs:{href:"/wiki/tiscript/functions#optional_parameters",title:"tiscript:functions"}},[t._v("可选参数")]),t._v("。")]),t._v(" "),s("h2",[s("a",{attrs:{name:"methods",id:"methods"}},[t._v("方法")])]),t._v(" "),s("p",[t._v("在类的上下文中声明的，其他名称的函数，是该类的一个方法。如果一个方法有一个this变量的引用，则它被称作"),s("em",[s("strong",[t._v("实例方法")])]),t._v("(又名 动态方法)。如果它没有this变量的引用，则它是一个"),s("em",[s("strong",[t._v("类方法")])]),t._v("(又名 静态方法)。原则上，一个函数，既可以作为实例方法，也可以作为类方法。当作为类方法调用时，this将会指向定义该方法所在的类或名称空间。当作为实例方法调用时(如obj.method())，this将会指向对象实例(这种情况下指向obj)。")]),t._v(" "),s("h3",[s("a",{attrs:{name:"instance-methods",id:"instance-methods"}},[t._v("实例方法")])]),t._v(" "),s("p",[t._v("实例方法必须在该类的特定对象上下文中调用:")]),t._v(" "),s("pre",{pre:!0,attrs:{class:"code tiscript"}},[s("code",[t._v("class Tor\n{\n  function rotate( angle ) {  this.angle = angle; this.update(); }\n}\nvar tor = new Tor();\ntor.rotate(270);     // Tor.rotate()方法在一个特定实例-'tor'的上下文上调用\n")])]),t._v(" "),s("h3",[s("a",{attrs:{name:"static-methods",id:"static-methods"}},[t._v("静态方法")])]),t._v(" "),s("p",[t._v('类/名称空间的静态方法可以使用ClassOrNamespace.Method语句(又名"点语句"):')]),t._v(" "),s("pre",{pre:!0,attrs:{class:"code tiscript"}},[s("code",[t._v("class Tor\n{\n  var all = [];\n  function rotateAll( angle ) {  for(var t in Tor.all) t.rotate(angle);  }\n}\nTor.rotateAll(270); // Tor.rotateAll()方法被当做类方法调用\n")])]),t._v(" "),s("h2",[s("a",{attrs:{name:"properties",id:"properties"}},[t._v("属性")])]),t._v(" "),s("p",[t._v("TIScript支持可计算(又名 虚拟)属性的定义。它是特殊函数——用于设置或获取一个属性的值。可计算属性的定义语法如下:")]),t._v(" "),s("pre",{staticClass:"code tiscript"},[s("code",[t._v("property")]),t._v(" <函数名> "),s("code",[t._v("(")]),t._v(" <参数> "),s("code",[t._v(")\n")]),t._v("{\n  [ <语句> | get <语句> | set <语句> ]*\n}\n")]),t._v(" "),s("p",[t._v("property的语句体内可以包含语句，语句可以出现在正常的函数体内，也可以出现在get和set节内。get节(一个或多个)在函数用于获取属性值时执行，而set节函数用于设置属性值时执行。示例:")]),t._v(" "),s("pre",{pre:!0,attrs:{class:"code tiscript"}},[s("code",[t._v('class Baz\n{\n  function this() { this._first = 1; this._second = 2; }\n  property first( val )\n  {\n    get return this._first; // single expression get block\n    set this._first = val;  // single expression set block\n  }\n  property second( val )\n  {\n    stdout << "second";\n    get\n    {\n      stdout << "get\\n";\n      return this._second + 2;\n    }\n    set\n    {\n      stdout << "set\\n";\n      this._second = val - 2;\n    }\n  }\n}\n')])]),t._v(" "),s("div",[t._v("注意：属性函数的声明必须包含一个参数，如val。")]),t._v(" "),s("h3",[t._v("未定义的属性处理器")]),t._v(" "),s("p",[t._v("你可以定义一个所谓的未定义的属性处理器(Undefined Property Handler), 它用于处理未定义属性。 定义UPH的语法类似于可计算属性处理器，只是它的名称是undefined:")]),t._v(" "),s("pre",{staticClass:"code tiscript"},[s("code",[t._v("property")]),t._v(" "),s("code",[t._v("undefined")]),t._v(" ( <name>, <value> )\n"),s("code",[t._v("{\n")]),t._v("  [<语句> | "),s("code",[t._v("get")]),t._v(" <语句> | "),s("code",[t._v("set")]),t._v(" <语句> ]*\n"),s("code",[t._v("}")]),t._v("\n")]),t._v(" "),s("p",[t._v("UPH函数必须有两个参数: 属性的名称<name>和属性的值ֵ<value>(用在属性的set操作)UPH可用在设置属性时属性名未知的情况下,例如，你可能希望将访问数据集的字段作为属性:")]),t._v(" "),s("pre",{pre:!0,attrs:{class:"code tiscript"}},[s("code",[t._v('property Recordset.undefined(name, val)\n{\n  get return this.getFieldValue(name);\n}\n...\nvar rs = DB.exec("SELECT firstName, secondName FROM employee");\nvar n1 = rs.firstName;  // ͨ通过undefined()属性直接调用rs.getFieldValue(#firstName); \nvar n2 = rs.secondName; \n')])]),t._v(" "),s("h2",[s("a",{attrs:{name:"type-variables",id:"type-variables"}},[t._v("类/名称空间  变量")])]),t._v(" "),s("p",[t._v("类，或名称空间、变量使用var关键字定义在类或名称空间的上下文。示例:")]),t._v(" "),s("pre",{pre:!0,attrs:{class:"code tiscript"}},[s("code",[t._v("namespace Toz\n{\n  var all = []; //创建一个空数组变量;\n  var singleton = { something: 123; }; // 创建一个对象变量;\n  var counter = 0; // 创建一个包含整数0的变量;\n}\n")])]),t._v(" "),s("p",[t._v("为了访问这些变量，请使用它的全名:")]),t._v(" "),s("pre",{pre:!0,attrs:{class:"code tiscript"}},[s("code",[t._v('Toz.all.push("anything");\nToz.counter += 1;\n')])]),t._v(" "),s("h2",[t._v("实例变量")]),t._v(" "),s("p",[t._v("类可能预先定义了所谓的实例变量。实例变量对于类的每个实例都是唯一的-不与其他实例共享")]),t._v(" "),s("p",[t._v("实例变量是通过使用this var关键字组合在类上下文中定义的。示例:")]),t._v(" "),s("pre",{pre:!0},[s("code",[t._v("class Recordset {\n  this var currentRecord = []; // note, these are\n  this var dbCursor = null;    // instance variables\n  function next() { this.currentRecord = DB.advanceNext(this.dbCursor); }\n}")])]),t._v(" "),s("h2",[s("a",{attrs:{name:"constants",id:"constants"}},[t._v("常量")])]),t._v(" "),s("p",[t._v("名称空间常量(又名 常量) 是只读变量，它使用const关键字定义。示例:")]),t._v(" "),s("pre",{pre:!0,attrs:{class:"code tiscript"}},[s("code",[t._v("namespace Toz\n{\n  const ALIGN_LEFT = 1;\n  const ALIGN_CENTER = 2;\n  const ALIGN_RIGHT = 3;\n}\n")])]),t._v(" "),s("p",[t._v("为了访问这些常量，请使用它的全名:")]),t._v(" "),s("pre",{pre:!0,attrs:{class:"code tiscript"}},[s("code",[t._v("switch(alignment)\n{\n  case Toz.ALIGN_LEFT: ... break;\n  case Toz.ALIGN_CENTER: ... break;\n  case Toz.ALIGN_RIGHT: ... break;\n  default: ... break;\n}\n")])]),t._v(" "),s("p",[s("sup",[s("a",{attrs:{href:"#fnt__1",id:"fn__1",name:"fn__1"}},[t._v("1)")])]),t._v(" 使用this作为构造函数的名称 的想法来自"),s("a",{staticClass:"urlextern",attrs:{href:"http://digitalmars.com/d/class.html#constructors",title:"http://digitalmars.com/d/class.html#constructors",rel:"nofollow"}},[t._v("D语言")])])])}),[],!1,null,null,null);e.default=r.exports}}]);