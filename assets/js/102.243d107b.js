(window.webpackJsonp=window.webpackJsonp||[]).push([[102],{325:function(v,_,e){"use strict";e.r(_);var t=e(28),n=Object(t.a)({},(function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("h1",{attrs:{id:"object-对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#object-对象"}},[v._v("#")]),v._v(" Object(对象)")]),v._v(" "),e("p",[v._v("#")]),e("p",[v._v("忽略它的名称，Object这里指代tiscript中的任何一个类，即任何一个类都包含下面的方法和属性。下面的if语句括号中的语句的值将为"),e("em",[v._v("true")]),v._v(":")]),v._v(" "),e("pre",{pre:!0},[e("code",[v._v('var obj = { one:1, two:2 }; // 从文字描述中创建一个对象\nif( obj instanceof Object )\nstdout.printf( "I am an instance of Object" ); // 这里将会输出\n')])]),v._v(" "),e("dl",[e("h2",[v._v("属性")]),v._v(" "),e("dt",[v._v("className")]),v._v(" "),e("dd",[v._v("只读, string. 如果对象作为用户自定义类的实例被创建，该函数返回类的名称。")]),v._v(" "),e("dt",[v._v("length")]),v._v(" "),e("dd",[v._v("只读, integer. 返回这个对象实例拥有的成员总数量。")]),v._v(" "),e("h2",[v._v("方法")]),v._v(" "),e("dt",[v._v("this")]),v._v(" "),e("dd",[v._v("( )\n"),e("p",[v._v("构造器, 创建对象类的实例。")])]),v._v(" "),e("dt",[v._v("toString"),e("br"),v._v(" toLocaleString")]),v._v(" "),e("dd",[v._v("( ) : string\n"),e("p",[v._v("返回"),e("code",[v._v('"[object Object]"字符串')]),v._v("。")])]),v._v(" "),e("dt",[v._v("valueOf")]),v._v(" "),e("dd",[v._v("( ) : value\n"),e("p",[v._v("返回对象本身的值。")])]),v._v(" "),e("dt",[v._v("clone")]),v._v(" "),e("dd",[v._v("( [deep:true] ) : object\n"),e("p",[v._v("产生一个对象的副本，并返回该副本。如果"),e("em",[v._v("deep")]),v._v(" === true，则该函数会递归，进行深克隆。")])]),v._v(" "),e("dt",[v._v("extend")]),v._v(" "),e("dd",[v._v("( [deep:true], object1, object2, ...  ) : this\n"),e("p",[v._v("通过将object1、object2等对象的属性合并的方式来扩展对象。")])]),v._v(" "),e("dt",[v._v("exists")]),v._v(" "),e("dd",[v._v("( "),e("strong",[v._v("tag")]),v._v(": value, ["),e("strong",[v._v("deep")]),v._v(" = false] ) : true | false\n"),e("p",[v._v("检查tag属性是否存在，如果deep == true，则进行深查找 - 在该对象本身和它的类链上查找。")])]),v._v(" "),e("dt",[v._v("remove")]),v._v(" "),e("dd",[v._v("( "),e("strong",[v._v("tag")]),v._v(": value ) : void\n"),e("p",[v._v("从对象中移除tag(又名name)属性。")])]),v._v(" "),e("dt",[v._v("call")]),v._v(" "),e("dd",[v._v("( "),e("strong",[v._v("func")]),v._v(": function, ["),e("strong",[v._v("p1")]),v._v(":value, "),e("strong",[v._v("p2")]),v._v(":value, ... "),e("strong",[v._v("pN")]),v._v(":value [, "),e("strong",[v._v("argv")]),v._v(": array] ] ) : value\n"),e("p",[v._v("调用"),e("em",[v._v("func")]),v._v("函数，并且使该函数上下文中的"),e("em",[v._v("this")]),v._v("变量等于该对象。如果提供了参数，则这些参数会传递到该函数中。如果"),e("em",[v._v("argv")]),v._v("被提供，则它的成员将会添加到参数列表中。")])]),v._v(" "),e("dt",[v._v("show")]),v._v(" "),e("dd",[v._v("( ["),e("strong",[v._v("out")]),v._v(": Stream] ) : void\n"),e("p",[v._v("报告该对象的类名和它的属性名/值列表。用于调试。")])]),v._v(" "),e("dt",[v._v("eval")]),v._v(" "),e("dd",[v._v("( "),e("strong",[v._v("what")]),v._v(": string | Stream [, "),e("strong",[v._v("namespace")]),v._v(": object] ): value\n"),e("p",[v._v("对"),e("strong",[v._v("what")]),v._v("进行求值(解释执行)，其中"),e("em",[v._v("this")]),v._v("等于该对象。如果"),e("em",[v._v("namespace")]),v._v("对象被提供，则"),e("strong",[v._v("what")]),v._v("会将"),e("em",[v._v("namespace")]),v._v("作为全局空间来进行求值。")])]),v._v(" "),e("dt",[v._v("propertyAt")]),v._v(" "),e("dd",[v._v("( "),e("strong",[v._v("tag")]),v._v(": value ) : value\n"),e("p",[v._v("在该对象内根据tag查找它的成员/属性。该函数等价于"),e("em",[v._v("obj.tag")]),v._v("。")])]),v._v(" "),e("dt",[v._v("seal")]),v._v(" "),e("dd",[e("strong",[v._v("( ")]),v._v("["),e("strong",[v._v("strict")]),v._v(":true|false] "),e("strong",[v._v(")")]),v._v(" : object\n"),e("p",[v._v("密封，锁定对象的结构 - 在调用后，任何尝试向该对象添加或移除属性的操作都会抛出一个错误。已经存在的属性可以被修改。返回值是该对象本身。如果"),e("em",[v._v("strict")]),v._v("参数被提供且为"),e("em",[v._v("true")]),v._v("，则任何获取位置属性的操作都会抛出一个错误。")])]),v._v(" "),e("dt",[v._v("isSealed")]),v._v(" "),e("dd",[e("strong",[v._v("( ")]),v._v("["),e("strong",[v._v("strict")]),v._v(":true|false]"),e("strong",[v._v(" )")]),v._v(" : true | false | undefined\n"),e("p",[v._v("如果对象被密封的，则返回"),e("em",[v._v("true")]),v._v("。如果"),e("em",[v._v("strict")]),v._v("参数被提供且为"),e("em",[v._v("true")]),v._v("，则只有"),e("em",[v._v("seal(true)")]),v._v("时才返回"),e("em",[v._v("true")]),v._v("。")])]),v._v(" "),e("dt",[v._v("freeze")]),v._v(" "),e("dd",[e("strong",[v._v("( ")]),v._v("["),e("strong",[v._v("strict")]),v._v(":true|false] "),e("strong",[v._v(")")]),v._v(" : object\n"),e("p",[v._v("冻结，锁定对象 - 使它是不可变的 - 任何添加、移除和修改属性值的操作都将抛出一个异常。返回值是该对象本身。如果"),e("em",[v._v("strict")]),v._v("参数被提供且为"),e("em",[v._v("true")]),v._v("，则任何获取位置属性的操作都会抛出一个错误。")])]),v._v(" "),e("dt",[v._v("isFrozen")]),v._v(" "),e("dd",[e("strong",[v._v("( ")]),v._v("["),e("strong",[v._v("strict")]),v._v(":true|false]"),e("strong",[v._v(" )")]),v._v(" : true | false | undefined\n"),e("p",[v._v("如果对象被冻结的，则返回"),e("em",[v._v("true")]),v._v("。如果"),e("em",[v._v("strict")]),v._v("参数被提供且为"),e("em",[v._v("true")]),v._v("，则只有"),e("em",[v._v("freeze(true)")]),v._v("时才返回"),e("em",[v._v("true")]),v._v("。")])]),v._v(" "),e("dt",[v._v("addObserver")]),v._v(" "),e("dd",[e("strong",[v._v("( observer")]),v._v(":function"),e("strong",[v._v(" )")]),v._v(" : undefined\n"),e("p",[v._v("为该对象添加观察器(observer) - 观察器是一个函数，当对象修改时会调用该函数。该观察器函数的签名应该为:")]),v._v(" "),e("p",[e("code",[v._v("function observer(changeDefinition) {}")]),v._v(" 其中changeDefinition是一个元组，它包含以下字段:")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("[0]")]),v._v(" - symbol, "),e("code",[v._v("#add")]),v._v("(属性增加)、"),e("code",[v._v("#update")]),v._v("(属性修改)、"),e("code",[v._v("#delete")]),v._v("(属性删除)中之一;")]),v._v(" "),e("li",[e("code",[v._v("[1]")]),v._v(" - object, 属性被修改的对象;")]),v._v(" "),e("li",[e("code",[v._v("[2]")]),v._v(" - symbol or string, 属性名;")]),v._v(" "),e("li",[e("code",[v._v("[3]")]),v._v(" - any, 新值;")]),v._v(" "),e("li",[e("code",[v._v("[4]")]),v._v(" - any, 旧值。")])])]),v._v(" "),e("dt",[v._v("removeObserver")]),v._v(" "),e("dd",[e("strong",[v._v("( observer")]),v._v(":function"),e("strong",[v._v(" | functionName")]),v._v(":symbol"),e("strong",[v._v(" )")]),v._v(" : undefined\n"),e("p",[v._v("根据函数引用或观察器名从对象中移除给定的观察器。")])]),v._v(" "),e("dt",[v._v("referenceOf")]),v._v(" "),e("dd",[e("strong",[v._v("( namespace")]),v._v(":object, "),e("strong",[v._v("path")]),v._v(":string"),e("strong",[v._v(" )")]),v._v(" : (collection:object, key:symbol|string)"),e("br"),v._v('\n当给定了以点号分隔(如"one.two.three")的'),e("strong",[v._v("path")]),v._v('时，该函数返回一个obj/key对。其中，obj为该对象中定义了"three"属性的对象和该属性的名称。')]),v._v(" "),e("dt",[v._v("keys")]),v._v(" "),e("dd",[v._v("( ) : array\n"),e("p",[v._v("该函数返回一个数组，数组中存放着该对象的所有键名的标识符。")])])]),e("p")])}),[],!1,null,null,null);_.default=n.exports}}]);