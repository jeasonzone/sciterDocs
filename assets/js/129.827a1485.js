(window.webpackJsonp=window.webpackJsonp||[]).push([[129],{264:function(t,e,r){"use strict";r.r(e);var n=r(28),v=Object(n.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"概述"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),r("h2",{attrs:{id:""}},[r("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")])]),t._v(" "),r("p",[t._v("简介\n")]),r("p",[t._v("作为一门脚本语言, TIScript是ECMAScript(JavaScript 1.X)的一种扩展版本。如果你愿意，你可以认为它是JavaScript++。")]),t._v(" "),r("p",[t._v('TIScript的设计初衷是基于JavaScript使用中的一些实践分析。从某些方面来说，它简化和协调了JavaScript的一些特性。例如，prototype(原型)机制使用起来就是比较简单的。而从另外一些方面来说，它又扩展了JavaScript，它对使用者来说保留了JS的原本"外观和感觉"。')]),t._v(" "),r("p",[t._v("TIScript脚本引擎支持以下功能:")]),t._v(" "),r("ul",[r("li",[t._v("编译器 - 产生字节码")]),t._v(" "),r("li",[t._v("虚拟机(VM) - 执行字节码")]),t._v(" "),r("li",[t._v("堆管理器 - 使用了一个内存拷贝垃圾回收器(GC)")]),t._v(" "),r("li",[t._v("运行时 - 本地对象类的实现")])]),t._v(" "),r("p",[t._v("这篇文章描述TIScript的主要特征，即它与JavaScript相比，去掉的和与它不同的特征。在看完这篇文章后，你应该可以感觉到TIScript与JavaScript或Python、Perl、Lua、Ruby等动态语言是相似的。")]),r("p"),t._v(" "),r("h2",{attrs:{id:"名称空间"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#名称空间"}},[t._v("#")]),t._v(" 名称空间")]),t._v(" "),r("p",[t._v("名称空间使用namespace关键字来声明。它们可以包含类、函数、变量和常量:")]),t._v(" "),r("pre",{pre:!0},[r("code",[r("em",[t._v("namespace")]),t._v(" MyNamespace\n{\n  var nsVar = 1;\n  function Foo() { nsVar = 2; }  // 设置nsVar为2\n}\nMyNamespace.Foo();  // 调用Foo函数\n")])]),t._v(" "),r("p",[t._v("JavaScript不支持名称空间。你可以通过使用对象来模拟名称空间，但那也确实只是模拟而已。")]),t._v(" "),r("p",[t._v("TIScript中的名称空间是一个简单的命名生命周期域。例如，当处理名称空间内的赋值操作时，它看起来就像一个全局变量，TIScript运行时首先会尝试在该函数所属的当前名称空间链内查找这个变量。")]),t._v(" "),r("h2",{attrs:{id:"类-构造器-属性"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#类-构造器-属性"}},[t._v("#")]),t._v(" 类, 构造器, 属性")]),t._v(" "),r("p",[t._v("TIScript引入了真正的类。一个类可以使用class关键字来声明，它可以包含函数、属性方法、变量、常量和其他类:")]),t._v(" "),r("pre",{pre:!0},[r("code",[r("em",[t._v("class")]),t._v(" Bar\n{\n  function this() {   // 名称为'this'的函数是该定义类的对象的构造器\n    this._one = 1;    \n  }                   \n  function foo(p1) {  // 一个方法\n    this._one = p1;\n  }\n"),r("em",[t._v("  property")]),t._v(" one(v) {           // 属性方法\n"),r("em",[t._v("    get")]),t._v(" { return this._one; } // 获取器\n"),r("em",[t._v("    set")]),t._v(" { this._one = v; }    // 设置器\n  }\n}\n")])]),t._v(" "),r("p",[t._v("注意声明的property函数。这是一种特殊的函数，它用于声明可计算属性。通常，属性的访问被封装在这个函数中:")]),t._v(" "),r("pre",{pre:!0},[r("code",[t._v("var bar = new Bar();  // 调用 Bar.this()函数\nbar.one = 2;          // 调用 Bar.one()::set 设置器\n")])]),t._v(" "),r("p",[t._v("注意，有一只特殊情况是：当一个属性的设置器在设计期时是未知的时，TIScript允许你通过property undefined()方法来实现对未知属性的访问控制:")]),t._v(" "),r("pre",{pre:!0},[r("code",[t._v("class Recordset\n{\n  function getFieldValue(idx) { ... }\n  function getFieldIdx(byName) { ... }\n"),r("em",[t._v("  property undefined")]),t._v("(name, val)\n  {\n    get { var fieldIdx = this.getFieldIdx(name);\n          return this.getFieldValue(fieldIdx); }\n  }\n}\n")])]),t._v(" "),r("p",[t._v("这个属性处理器可以用于下面的代码:")]),t._v(" "),r("pre",{pre:!0},[r("code",[t._v('var rs = DB.exec( "SELECT one, two FROM sometable" );\nvar one = rs.one; // ͨ通过上面的特殊处理器来访问数据集中名称为"one"的列信息\n')])]),t._v(" "),r("h2",{attrs:{id:"轻量的匿名函数"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#轻量的匿名函数"}},[t._v("#")]),t._v(" 轻量的匿名函数")]),t._v(" "),r("p",[t._v("TIScript引入了定义匿名函数的轻量语法。TIScript中共有3中方式来声明匿名函数:")]),t._v(" "),r("dl",[r("dt",[t._v("单语句的lambda函数:")]),t._v(" "),r("dd",[r("code",[t._v("':' [参数列表] ':' <语句>;")])]),t._v(" "),r("dt",[t._v("Lambda函数块:")]),t._v(" "),r("dd",[r("code",[t._v("':' [参数列表] '{' <语句列表> '}'")])]),t._v(" "),r("dt",[t._v("经典的匿名函数:")]),t._v(" "),r("dd",[r("code",[t._v("'function(' [参数列表] ')' '{' <语句列表> '}'")])])]),t._v(" "),r("p",[t._v("下面的代码演示如何通过一个匿名比较函数来实现对一个数组进行降序排序:")]),t._v(" "),r("pre",{pre:!0},[r("code",[t._v("var arr = [1,2,3];\narr.sort( :a,b: a < b? 1:-1 );\n")])]),t._v(" "),r("p",[t._v("其中, :a,b: a < b? 1:-1是一个lambda函数，它将被传递到Array.sort()方法中。")]),t._v(" "),r("h2",{attrs:{id:"装饰器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#装饰器"}},[t._v("#")]),t._v(" 装饰器")]),t._v(" "),r("p",[t._v("装饰器是一种元编程特性，它借鉴于Python语言。在TIScript脚本中, 一个装饰器是一个普通的函数。它的名称必须以'@'字符开头，并且它必须至少有一个参数。这个参数(第一个)是一个指向那些被装饰的函数(或类)的引用。 下面是一个装饰器函数声明示例:")]),t._v(" "),r("pre",{pre:!0},[r("code",[t._v("function @KEY(func, keyCode)\n{\n  function t(event) // 封装对func()的调用到一个过滤函数\n  {                \n    if(event.keyCode == keyCode)\n      func();\n    if(t.next)\n      t.next.call(this,event);\n  }\n  t.next = this.onKey; // this变量这里指向func()函数所属的类\n  this.onKey = t;      // 建立事件处理链\n}\n")])]),t._v(" "),r("p",[t._v("如果在我们的代码中有上面的代码，那么我们可以定义当不同的按键按下时激活不同的代码块:")]),t._v(" "),r("pre",{pre:!0},[r("code",[t._v("class MyWidget : Widget\n{\n  @KEY 'A' : { this.doSelectAll(); }\n  @KEY 'B' : { this.doSomethingWhenB(); }\n}\n")])]),t._v(" "),r("p",[t._v("上面的代码中, 两个@KEY装饰器装饰了两个匿名方法(见上面的节)。上面的代码假设某处存在一个有onKey(event)回调函数的class Widget类定义。")]),t._v(" "),r("p",[t._v("装饰器是一种高级特性，它需要花费一些努力来理解。当装饰器被创建，它可以很优雅的递增你的实现代码。关于装饰器的更多内容，请点击"),r("a",{staticClass:"wikilink1",attrs:{href:"/wiki/tiscript/decorators",title:"tiscript:decorators"}},[t._v("这里")]),t._v("和"),r("a",{attrs:{href:"http://www.terrainformatica.com/index.php/?p=108",rel:"bookmark"}},[t._v("这里")]),t._v("。")]),t._v(" "),r("h2",{attrs:{id:"迭代器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#迭代器"}},[t._v("#")]),t._v(" 迭代器")]),t._v(" "),r("p",[t._v("JavaScript(以及TIScript)有个非常有用的for-each语句: for( var item in collection ){..}，其中，collection是一个对象或数组的实例。")]),t._v(" "),r("p",[t._v("在TIScript中，可枚举的对象列表中增加了函数实例。因此for( var item in func )语句可以调用func函数，并且在循环体的每次迭代中包含函数的返回值。如下面的函数:")]),t._v(" "),r("pre",{pre:!0},[r("code",[t._v("function range( from, to )\n{\n  var idx = from - 1;\n  return function() { if( ++idx <= to ) return idx; }\n}\n")])]),t._v(" "),r("p",[t._v("在下面的for循环中，将会生成[from..to]范围的连续数字:")]),t._v(" "),r("pre",{pre:!0},[r("code",[t._v('for( var item in range(12,24) )\n   stdout << item << " ";\n')])]),t._v(" "),r("p",[t._v("你将会得到从12到24一个一个的打印出来。")]),t._v(" "),r("p",[t._v("这里是另一个关于class-collection的示例，它允许在两个方向上枚举它的成员:")]),t._v(" "),r("pre",{pre:!0},[r("code",[t._v('class Fruits\n{\n  function this() {\n    this._data = ["apple","orange","lime","lemon",\n                  "pear","banan","kiwi","pineapple"]; }\n  property forward(v)\n  {\n    get {\n      var items = this._data;  var idx = -1;\n      // 返回一个函数，该函数为每次迭代中下一次调用的函数\n      // 在这个返回函数中如果没有返回值将终止for循环\n      return function() { if( ++idx < items.length ) return items[idx]; }\n    }\n  }\n  property backward(v)\n  {\n    get {\n      var items = this._data; var idx = items.length;\n      return function() { if( --idx >= 0 ) return items[idx]; }\n    }\n  }\n}\n')])]),t._v(" "),r("p",[t._v("就像你看到的，这个类有两个属性，它们分别定义了两个方向上浏览集合的迭代器:")]),t._v(" "),r("pre",{pre:!0},[r("code",[t._v('var fruits = new Fruits();\n  stdout << "正方向上打印Fruits:\\n";\nfor( var item in '),r("strong",[t._v("fruits.forward")]),t._v(' ) stdout << item << "\\n";\n  stdout << "反方向上打印Fruits:\\n";\nfor( var item in '),r("strong",[t._v("fruits.backward")]),t._v(' ) stdout << item << "\\n";\n')])]),t._v(" "),r("p",[t._v("Mozilla社区引入了"),r("a",{staticClass:"l",attrs:{href:"https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Iterators_and_Generators",onmousedown:"return clk(this.href,'','','res','1','&sig2=Z5S9FJOQ4UcsNkUoe67JEQ')"}},[t._v("Iterators in Spider Monkey")]),t._v('迭代方式，我想他们借鉴了Python中的"as is"语句。不过我认为，我的这种迭代器方式更匹配JavaScript的精髓，至少我没有引入新的实体和类。')]),t._v(" "),r("h2",{attrs:{id:"prototype-原型-属性"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#prototype-原型-属性"}},[t._v("#")]),t._v(" prototype(原型)属性")]),t._v(" "),r("p",[t._v("相比于JavaScript，TIScript中的原型机制使用起来更为简单。")]),t._v(" "),r("p",[t._v("TIScript中的每个对象都有一个名称为prototype的属性。一个对象的prototype属性指向该对象的类(类实际上也是一个对象)。一个类的prototype属性指向它的父类。同样地，一个名称空间(它实际上也是一个对象)的prototype属性指向它的父名称空间。")]),t._v(" "),r("p",[t._v("例如，下面的语句求值都将为true:")]),t._v(" "),r("pre",{pre:!0},[r("code",[t._v('"somestring".prototype === String; //字符串的prototype是String类对象\n{ some:"object", literal:true }.prototype === Object;\n')])]),t._v(" "),r("p",[t._v("声明的规则同样适用于用户自定义的类:")]),t._v(" "),r("pre",{pre:!0},[r("code",[t._v("class Foo { ... }\n  var foo = new Foo();\n      foo.prototype === Foo;\n")])]),t._v(" "),r("h2",{attrs:{id:"类型系统"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#类型系统"}},[t._v("#")]),t._v(" 类型系统")]),t._v(" "),r("p",[t._v("JavaScript中将整数和浮点数都统一成数字类型。而在TIScript中，它们被分拆成了两个不同的类: "),r("a",{attrs:{href:"Integer.htm"}},[t._v("Integer")]),t._v("和"),r("a",{attrs:{href:"Float.htm"}},[t._v("Float")]),t._v("，而且它们也确实表现为两个不同的实体。")]),t._v(" "),r("p",[t._v("TIScript也引入了一些新的类型:")]),t._v(" "),r("dl",[r("dt",[r("a",{attrs:{href:"Stream.whtm"}},[r("em",[t._v("Stream")])])]),t._v(" "),r("dd",[t._v('Stream是一个字符或字节序列。 TIScript运行时支持3种类型的流: 内存流(又名字符串流)、socket流、文件流。内存流是一种生成文本的有效方式，引入它的目的类似于"big Java"中的StringBuffer/StringBuilder类。')]),t._v(" "),r("dt",[r("a",{attrs:{href:"Bytes.whtm"}},[r("em",[t._v("Bytes")])])]),t._v(" "),r("dd",[t._v("一个Bytes对象的实例是一个字节数组。")]),t._v(" "),r("dt",[r("a",{attrs:{href:"Storage.htm"}},[r("em",[t._v("Storage")])]),t._v("和"),r("a",{attrs:{href:"Index.htm"}},[r("em",[t._v("Index")])])]),t._v(" "),r("dd",[t._v("则两个类构成了TIScript内建的持久化机制。通过将一个TIScript对象赋值到storage.root属性，可以将该对象(和它引用的所有对象)持久化，这三个对象将透明的存储到存储文件中。这个文件在哪里? 本质上, 这是一个对象数据库。我称它为JSON-DB, 因为JS对象的JSON子集才可以被持久化。例如socket流自然不能持久化。")]),t._v(" "),r("dt",[t._v("标识符(又名原子)")]),t._v(" "),r("dd",[t._v("几乎所有的动态语言都有一种形式的原子概念。TIScript同样也有")])]),t._v(" "),r("h3",[t._v("标识符(Symbol)")]),t._v(" "),r("p",[t._v("一个对象的名称就是一个标识符。一个标识符是一个关联到一个数字的名称。TIScript中有一个全局的name<->int对的映射表(内部实际是一个三元搜索树)。编译时，每个名称被翻译成一个int32数字。")]),t._v(" "),r("p",[t._v("在某项情况时，你可能需要显示声明标识符。这种情况，你可以使用标识符声明文字。标识符声明文字是一个以'#'字符开头的字符序列。它可以包含字母-数字字符、下划线('_')、减号('-')。标识符中的减号用来兼容CSS中的名称。")]),t._v(" "),r("p",[t._v("标识符的使用示例:")]),t._v(" "),r("pre",{pre:!0},[r("code",[t._v("function ChangeMode( mode )\n{\n  if( mode == "),r("strong",[t._v("#edit")]),t._v(" )\n    this.readOnly = false;\n  else if( mode == "),r("strong",[t._v("#read-only")]),t._v(' )\n    this.readOnly = true;\n  else\n    throw mode.toString() + " - bad symbol!";\n}\n')])]),t._v(" "),r("p",[t._v("如你说看到的，标识符是自描述、方便、有效的自动枚举值。")]),t._v(" "),r("p",[t._v("标识符的另一个特征：标识符访问 语句。")]),t._v(" "),r("p",[t._v("如下:")]),t._v(" "),r("code",[r("pre",{pre:!0},[r("code",[t._v("var aa = obj#name;\nobj#name = val;\n")])])]),t._v(" "),r("p",[t._v("将会翻译成")]),t._v(" "),r("pre",{pre:!0},[r("code",[r("code",[t._v("var aa = obj[#name]; //")]),t._v(" 和\n"),r("code",[t._v("obj[#name] = val")]),t._v("\n")])]),t._v(" "),r("p",[t._v("没改变态度，不会会使语句变得更可读。")]),t._v(" "),r("p",[t._v("这种方式经常用在"),r("a",{attrs:{href:"/sciter/main.whtm"}},[t._v("Sciter")]),t._v("——一种嵌入的HTML/CSS/脚本 引擎。例如，访问DOM元素的样式属性:")]),t._v(" "),r("pre",{pre:!0},[r("code",[t._v('var elem = self.select("#some");\nelem.style#display = "block";\nelem.style#border-left-width = px(1); // 或 elem.style[#border-left-width] = "1px";\nelem.style#border-right-width = px(2);\n...\n')])]),t._v(" "),r("h2",{attrs:{id:"总结"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),r("p",[t._v("上面的内容是TIScript的一个简要概览。在下一篇文章中，我将会解答如何将TIScript引擎集成到你的应用程序中。")]),t._v(" "),r("p",[t._v("这篇文章是用WYSIWYG HTML编辑器scapp(是Sciter application的简写形式)写的。它可以在"),r("a",{attrs:{href:"sciter-sdk.zip"}},[t._v("Sciter SDK")]),t._v("/scapps/blocknote.net中找到:")]),t._v(" "),r("p",[r("img",{attrs:{src:"sciter-blocknote.png"}})])])}),[],!1,null,null,null);e.default=v.exports}}]);