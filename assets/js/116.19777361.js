(window.webpackJsonp=window.webpackJsonp||[]).push([[116],{255:function(e,t,v){"use strict";v.r(t);var _=v(28),o=Object(_.a)({},(function(){var e=this,t=e.$createElement,v=e._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h1",{attrs:{id:"q-jquery-库"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#q-jquery-库"}},[e._v("#")]),e._v(" q(JQuery)库")]),e._v(" "),v("h2",{attrs:{id:"基本原则-与-elementlist"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#基本原则-与-elementlist"}},[e._v("#")]),e._v(" 基本原则 与 ElementList")]),e._v(" "),v("p",[e._v("Sciter的所有内建方法都提供了一个元素实例的列表，它是一个可以包含元素的ElementList类型(class)的数组。")]),e._v(" "),v("p",[e._v("和其他内建类一样，ElementList也是可扩展的。q.tis(部分)实现了jQuery的功能，它是ElementList类的一个扩展函数集。")]),e._v(" "),v("p",[e._v("因此，下面的这些函数的返回值就是用于query对象的:")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("$$(selector) : ElementList")]),e._v(' - 全局的"字符串器"函数;')]),e._v(" "),v("li",[v("code",[e._v("element.$$(selector) : ElementList ")]),e._v("- DOM元素的方法函数 - 返回element的作用域内的元素列表;")]),e._v(" "),v("li",[v("code",[e._v('element.selectAll("selector")  : ElementList')]),e._v(" - 类似于"),v("code",[e._v("element.$$(selector)")]),e._v(", 不过它的参数是一个普通的字符串;")]),e._v(" "),v("li",[v("code",[e._v('element.selectParents("selector")  : ElementList')]),e._v(" - 类似于"),v("code",[e._v("element.$$(selector)")]),e._v(", 不过它的参数是一个普通的字符串;")])]),e._v(" "),v("p",[e._v("注意：ElementList继承于标准的Array对象，所以数组的所有方法ElementList都可以使用。")]),e._v(" "),v("h3",[e._v("q()函数")]),e._v(" "),v("p",[e._v("q.tis定义了一个"),v("code",[e._v("q()")]),e._v("函数，该函数等价于"),v("code",[e._v("$()")]),e._v(" in jQuery realm. "),v("code",[e._v("q()")]),e._v("，它接受以下参数，并且返回一个ElementList类型的数组:")]),e._v(" "),v("ul",[v("li",[v("code",[e._v('q("selector")')]),e._v(" - 根据指定的选择器返回一个匹配元素的数组——实例为ElementList的数组;")]),e._v(" "),v("li",[v("code",[e._v('q("< some html >")')]),e._v(" - 如果参数字符串以'<'开头，并且以'>'结尾，则该参数会被当做一段html代码。这种情况下，该函数将会解析该html代码，并且返回解析后的元素列表。")]),e._v(" "),v("ul",[v("p",[e._v("示例: "),v("code",[e._v('q("<p>Some text</p>")')]),e._v(" 将返回一个只包含一个元素(一个p段落)的列表。")])]),e._v(" "),v("li",[v("code",[e._v("q(element)")]),e._v(" - 封装element元素到一个只有一个元素的ElementList数组，并返回该数组。")]),e._v(" "),v("li",[v("code",[e._v("q(elementlist)")]),e._v(" - 如果参数是ElementList实例。则该函数仅仅是简单地返回该参数。")]),e._v(" "),v("li",[v("code",[e._v("q(function)")]),e._v(" - 将函数添加到事件队列中，并立即返回。该函数将稍后执行。类似于传统浏览器中的 "),v("code",[e._v("window.setTimeout(function,0);")]),e._v("。Sciter中脚本的执行发生在DOM元素准备好后，所以这里无需任何的jQuery-alike。")])]),e._v(" "),v("dl",[v("h2",[e._v("DOM操作")]),e._v(" "),v("dt",[e._v("add")]),e._v(" "),v("dd",[v("p",[v("code",[e._v("add(selector, [context])  ⇒ collection")])]),e._v(" "),v("p",[e._v("添加满足selector选择器的元素到元素列表中。返回一个新的、更新后的容器。")])]),e._v(" "),v("dt",[e._v("addClass")]),e._v(" "),v("dd",[v("p",[v("code",[e._v("addClass(name)  ⇒ self")]),v("br"),v("code",[e._v("addClass(function(index, oldClassName){ ... })  ⇒ self")])]),e._v(" "),v("p",[e._v("为元素添加class，"),v("em",[e._v("name")]),e._v("可以是多个以空格分隔的名称。")])]),e._v(" "),v("dt",[e._v("removeClass")]),e._v(" "),v("dd",[v("p",[v("code",[e._v("removeClass()  ⇒ self"),v("br"),e._v("removeClass(name)  ⇒ self")]),v("br"),v("code",[e._v("removeClass(function(index, oldClassName){ ... })  ⇒ self")])]),e._v(" "),v("p",[e._v("移除元素中的class。"),v("em",[e._v("name")]),e._v('可以是多个以空格分隔的名称。如果name参数未指定，则移除元素的 "class"属性。')])]),e._v(" "),v("dt",[e._v("toggleClass")]),e._v(" "),v("dd",[v("p",[v("code",[e._v("toggleClass(name)  ⇒ self")]),v("br"),v("code",[e._v("toggleClass(function(index, oldClassName){ ... })  ⇒ self")])]),e._v(" "),v("p",[e._v("切换(添加/移除)元素的class。"),v("em",[e._v("name")]),e._v("可以是多个以空格分隔的名称。")])]),e._v(" "),v("dt",[e._v("after")]),e._v(" "),v("dd",[v("p",[v("code",[e._v("after(content)  ⇒ self")])]),e._v(" "),v("p",[e._v("在容器中每个元素后面添加content内容。"),v("em",[e._v("content")]),e._v("可以是html字符串、DOM元素或元素数组：")]),e._v(" "),v("pre",[v("code",[e._v('q("form input").after("<span>A note after the input</span>");\n')])])]),e._v(" "),v("dt",[e._v("before")]),e._v(" "),v("dd",[v("p",[v("code",[e._v("before(content)  ⇒ self")])]),e._v(" "),v("p",[e._v("在容器中每个元素前面添加content内容。"),v("em",[e._v("content")]),e._v("可以是html字符串、DOM元素或元素数组：")]),e._v(" "),v("pre",[v("code",[e._v('q("form input").before("<label>field:</label>");\n')])])]),e._v(" "),v("dt",[e._v("replaceWith")]),e._v(" "),v("dd",[v("p",[v("code",[e._v("replaceWith(content)  ⇒ self")])]),e._v(" "),v("p",[e._v("替换容器中的每个元素为新的content内容。"),v("em",[e._v("content")]),e._v("可以是html字符串、DOM元素或元素数组。")])]),e._v(" "),v("dt",[e._v("append")]),e._v(" "),v("dd",[v("p",[v("code",[e._v("append(content)  ⇒ self")])]),e._v(" "),v("p",[e._v("在容器中每个元素内部附加content内容。"),v("em",[e._v("content")]),e._v("可以是html字符串、DOM元素或元素数组。")]),e._v(" "),v("pre",[v("code",[e._v('q("ul").append("<li>New list item</li>");\n')])])]),e._v(" "),v("dt",[e._v("appendTo, $appendTo")]),e._v(" "),v("dd",[v("p",[v("code",[e._v("appendTo(target)  ⇒ self")]),v("br"),v("code",[e._v("$appendTo(selector)  ⇒ self")])]),e._v(" "),v("p",[e._v("将该列表中的元素内容添加到目标元素。该操作与"),v("em",[e._v("append")]),e._v("正好相反。")]),e._v(" "),v("pre",[v("code",[e._v('q("ol>li").appendTo("ul");\n')])])]),e._v(" "),v("dt",[e._v("attr")]),e._v(" "),v("dd",[v("p",[v("code",[e._v("attr(name)  ⇒ string"),v("br"),e._v("attr(name, value)  ⇒ self"),v("br"),e._v("attr(name, function(index, oldValue){ ... })  ⇒ self"),v("br"),e._v("attr({ name: value, name2: value2, ... })  ⇒ self")])]),e._v(" "),v("p",[e._v("读取或设置DOM元素的属性。"),v("code",[e._v("attr(name)")]),e._v("从列表中的第一个元素上读取属性。其他变体是设置列表中每个元素的属性。")]),e._v(" "),v("pre",[v("code",[e._v('var form = q("form");\nform.attr("action");                 //=> 读取action属性\nform.attr("action", "/create.php");  //=> 设置action属性\nform.attr("action", undefined);      //=> 移除action属性\n// multiple attributes at once:\nform.attr {\n  action: "/create.php",\n  method: "post"\n};\n')])])]),e._v(" "),v("dt",[e._v("removeAttr")]),e._v(" "),v("dd",[v("p",[v("code",[e._v("removeAttr(name)  ⇒ self")])]),e._v(" "),v("p",[e._v("移除列表中每个元素的name参数指定的属性。")])]),e._v(" "),v("dt",[e._v("children, $children")]),e._v(" "),v("dd",[v("p",[v("code",[e._v('children(["selector"])  ⇒ collection')]),v("br"),v("code",[e._v("$children(selector)  ⇒ collection")])]),e._v(" "),v("p",[e._v("获取当前列表中每个元素的直接子元素，返回一个新列表。")]),e._v(" "),v("pre",[v("code",[e._v('q("ol").children("li:nth-child(2n)"); //返回<ol>中偶数项列表 \n$$(ol).$children(li:nth-child(2n));   \n')])])]),e._v(" "),v("dt",[e._v("closest, $closest")]),e._v(" "),v("dd",[v("p",[v("code",[e._v('closest(["selector"]) ⇒ collection'),v("br"),e._v("closest(collection) ⇒ collection"),v("br"),e._v("closest(element) ⇒ collection"),v("br"),e._v("closest(function(){}) ⇒ collection"),v("br"),e._v("$closest(selector)  ⇒ collection")])]),e._v(" "),v("p",[e._v("获取列表中每个元素的直接父元素列表。返回一个新列表。")]),e._v(" "),v("pre",[v("code",[e._v('var input = q("input[type=text]");\nvar itsForm = input.closest("form");\n')])])]),e._v(" "),v("dt",[e._v("contents")]),e._v(" "),v("dd",[v("p",[v("code",[e._v("contents()  ⇒ list (array) of nodes")])]),e._v(" "),v("p",[e._v("返回内容节点数组——列表中所有元素的所有子节点的合并列表。")])]),e._v(" "),v("dt",[e._v("css")]),e._v(" "),v("dd",[v("p",[v("code",[e._v("css(property)  ⇒ value"),v("br"),e._v("css(property, value)  ⇒ self"),v("br"),e._v("css({property: value, property2: value2, ... })  ⇒ self")])]),e._v(" "),v("p",[e._v("获取或设置列表中的DOM元素的样式属性。")]),e._v(" "),v("pre",[v("code",[e._v('var elem = q("h1");\nelem.css("background-color");                         // 读属性\nelem.css("background-color", "#369");       // 写属性\nelem.css("background-color", color(0x33,0x66,0x99));  // 写属性\nelem.css("background-color", undefined);              // 移除属性\n// 设置多个属性:\nelem.css { background-color: "#8EE",\n           opacity: 0.75,\n           font-size: 28pt };\n')])])]),e._v(" "),v("dt",[e._v("each")]),e._v(" "),v("dd",[v("p",[v("code",[e._v("each(function(index, item){ ... })  ⇒ self")])]),e._v(" "),v("p",[e._v("为列表中的每个元素调用参数中的函数。在每次调用中的"),v("em",[e._v("this")]),e._v("变量被设置为迭代的当前元素。")]),e._v(" "),v("pre",[v("code",[e._v('q("form input").each(function(index){\n  stdout.println("input at ",index," is ", this);\n});\n')])]),e._v(" "),v("p",[e._v("注意，声明的代码可以简写成下面的形式:")]),e._v(" "),v("pre",[v("code",[e._v('for(var (idx,el) in q("form input"))\n  stdout.println("input at ",idx," is ", el);\n')])]),e._v(" "),v("p",[e._v("- 少了括号，并且每次迭代中没有函数调用。")])]),e._v(" "),v("dt",[e._v("empty")]),e._v(" "),v("dd",[v("p",[v("code",[e._v("empty()  ⇒ self")])]),e._v(" "),v("p",[e._v("清空列表中每个元素的内容。")])]),e._v(" "),v("dt",[e._v("eq")]),e._v(" "),v("dd",[v("p",[v("code",[e._v("eq(index)  ⇒ collection")])]),e._v(" "),v("p",[e._v("获取列表中在index位置的项。")]),e._v(" "),v("pre",[v("code",[e._v('q("li").eq(0);  // 第一项\nq("li").eq(-1); // 最后一项\n')])])]),e._v(" "),v("dt",[e._v("filter, $filter")]),e._v(" "),v("dd",[v("p",[v("code",[e._v('filter("selector")  ⇒ collection'),v("br"),e._v("filter(function(index){ ... })  ⇒ collection")]),v("br"),v("code",[e._v("$filter(selector)  ⇒ collection")])]),e._v(" "),v("p",[e._v("过滤列表中的元素，因此过滤后列表中只包含满足selector选择器或调用参数中的过滤函数返回"),v("em",[e._v("true")]),e._v("的元素。")])]),e._v(" "),v("dt",[e._v("find, $find")]),e._v(" "),v("dd",[v("p",[v("code",[e._v('find("selector")  ⇒ collection'),v("br"),e._v("find(collection)  ⇒ collection"),v("br"),e._v("find(element)  ⇒ collection")]),v("br"),v("code",[e._v("$find(selector)  ⇒ collection")])]),e._v(" "),v("p",[e._v("查找列表中满足selector选择器的元素子孙。如果指定了collection(元素的列表)，则返回结果是该collection列表(子集)——所有在self和collection中都包含的元素。")]),e._v(" "),v("pre",[v("code",[e._v("var form = $$(#myform);\nvar inputs = form.$find(input,textarea,select,widget,button);\n")])])]),e._v(" "),v("dt",[e._v("first")]),e._v(" "),v("dd",[v("p",[v("code",[e._v("first()  ⇒ collection")])]),e._v(" "),v("p",[e._v("从列表中获取第一个元素，返回只包含一个元素的列表，如果self为空列表时则返回一个空列表。")]),e._v(" "),v("pre",[v("code",[e._v('var form = q("form").first();\n')])])]),e._v(" "),v("dt",[e._v("get")]),e._v(" "),v("dd",[v("p",[v("code",[e._v("get()  ⇒ array"),v("br"),e._v("get(index)  ⇒ DOM element")])]),e._v(" "),v("p",[e._v("获取列表中在"),v("em",[e._v("index")]),e._v("位置的元素，如果index未指定，则返回整个列表作为一个普通数组。")]),e._v(" "),v("pre",[v("code",[e._v('var items = q("li");\nvar li2 = items.get(2);\n')])]),e._v(" "),v("p",{staticClass:"note"},[e._v("注意: 你也可以使用indexed访问器来达到相同目的:")]),e._v(" "),v("pre",[v("code",[e._v("var li2 = items[2];\n")])])]),e._v(" "),v("dt",[e._v("has, $has")]),e._v(" "),v("dd",[v("p",[v("code",[e._v('has("selector")  ⇒ collection'),v("br"),e._v("has(element)  ⇒ collection"),v("br"),e._v("$has(selector)  ⇒ collection")])]),e._v(" "),v("p",[e._v("过滤列表，使它仅包含满足selector选择器的元素，或者指定的element元素。")]),e._v(" "),v("pre",[v("code",[e._v('q("dl > dd").has("a[href]")\n//=> 只获取包含链接的dd元素\n')])])]),e._v(" "),v("dt",[e._v("hasClass")]),e._v(" "),v("dd",[v("p",[v("code",[e._v('hasClass("name")  ⇒ true/false')])]),e._v(" "),v("p",[e._v("检查列表中是否有元素有name指定的class。")])]),e._v(" "),v("dt",[e._v("hide")]),e._v(" "),v("dd",[v("p",[v("code",[e._v("hide()  ⇒ self")])]),e._v(" "),v("p",[e._v("这里只是简单的执行"),v("code",[e._v('this.addClass("hidden")')]),e._v("。因此为了使该方法有用，你需要在你的CSS中有"),v("code",[e._v("*.hidden { display:none; }")]),e._v("或类似的声明。")]),e._v(" "),v("p",{staticClass:"note"},[e._v("注意：这个hide()方法的实现不同于jQuery或Zepto。"),v("code",[e._v("hide()")]),e._v("这里只是设置"),v("code",[e._v('el.style.display="none"')]),e._v("使"),v("code",[e._v("show()")]),e._v("变得无效而已。")])]),e._v(" "),v("dt",[e._v("show")]),e._v(" "),v("dd",[v("p",[v("code",[e._v("show()  ⇒ self")])]),e._v(" "),v("p",[e._v("这里只是简单的执行"),v("code",[e._v('this.removeClass("hidden")')]),e._v(".因此为了使该方法有用，你需要在你的CSS中有"),v("code",[e._v("*.hidden { display:none; }")]),e._v("或类似的声明。")])]),e._v(" "),v("dt",[e._v("toggle")]),e._v(" "),v("dd",[v("p",[v("code",[e._v("toggle()  ⇒ self")]),v("br"),v("code",[e._v("toggle(onoff)  ⇒ self")])]),e._v(" "),v("p",[e._v("为列表中每个元素根据class是否有hidden来调用show()或hide()方法。如果onoff参数被提供，则会根据该参数来决定是调用self.show()还是self.hide()。")])]),e._v(" "),v("dt",[e._v("html")]),e._v(" "),v("dd",[v("p",[v("code",[e._v("html() ⇒ string"),v("br"),e._v('html("content") ⇒ collection'),v("br"),e._v("html(function(index, oldHtml){ ... }) ⇒ collection")])]),e._v(" "),v("p",[e._v("上面的第一个方法获取列表中的第一个元素的HTML内容。其他方法用来设置容器中元素的HTML内容。")]),e._v(" "),v("pre",[v("code",[e._v('q(".comment:empty").html("<em>no comments yet!</em>");\n')])])]),e._v(" "),v("dt",[e._v("index")]),e._v(" "),v("dd",[v("p",[v("code",[e._v("index([element])  ⇒ integer | undefined")])]),e._v(" "),v("p",[e._v("获取"),v("em",[e._v("element")]),e._v("元素在列表中的索引位置，如果"),v("em",[e._v("element")]),e._v("不在列表中，则返回-1。如果element参数未指定，则返回列表中第一个元素在它的兄弟元素中的索引位置。")]),e._v(" "),v("pre",[v("code",[e._v('q("li:nth-child(2)").index() //=> 1\n')])])]),e._v(" "),v("dt",[e._v("insertAfter, insertBefore")]),e._v(" "),v("dd",[v("p",[v("code",[e._v("insertAfter(target)  ⇒ self")]),v("br"),v("code",[e._v("insertBefore(target)  ⇒ self")])]),e._v(" "),v("p",[e._v("将列表中的元素插入到target元素的后面/前面。该操作类似于"),v("em",[e._v("after()")]),e._v("、"),v("em",[e._v("before()")]),e._v("方法，只是源/目标元素刚好相反。")]),e._v(" "),v("pre",[v("code",[e._v('var fields = q("form input");'),v("br"),e._v('q("<em>Required field</em>").insertAfter(fields.filter(".required"));\n')])])]),e._v(" "),v("dt",[e._v("is, $is")]),e._v(" "),v("dd",[v("p",[v("code",[e._v('is("selector")  ⇒ true/false'),v("br"),e._v("$is(selector)  ⇒ true/false")])]),e._v(" "),v("p",[e._v("检查列表中的第一个元素是否匹配selector选择器。")])]),e._v(" "),v("dt",[e._v("last")]),e._v(" "),v("dd",[v("p",[v("code",[e._v("last()  ⇒ collection")])]),e._v(" "),v("p",[e._v("获取列表中的最后一个元素，返回的列表值包含一个元素。如果self本身为空则返回空列表。")]),e._v(" "),v("pre",[v("code",[e._v('var form = q("form").last();\n')])])]),e._v(" "),v("dt",[e._v("next, $next")]),e._v(" "),v("dd",[v("p",[v("code",[e._v("next()  ⇒ collection"),v("br"),e._v('next("selector")  ⇒ collection'),v("br"),e._v("$next(selector)  ⇒ collection")])]),e._v(" "),v("p",[e._v("将列表中的每个元素都跳到下一个元素。")]),e._v(" "),v("pre",[v("code",[e._v('var dd = q("dl > dt").next(); //所有元素都跳到下一个td元素\n')])])]),e._v(" "),v("dt",[e._v("not, $not")]),e._v(" "),v("dd",[v("p",[v("code",[e._v('not("selector")  ⇒ collection'),v("br"),e._v("not(collection)  ⇒ collection"),v("br"),e._v("not(function(index){ ... })  ⇒ collection"),v("br"),e._v("$not(selector)  ⇒ collection")])]),e._v(" "),v("p",[e._v("过来当前容器中的元素，返回一个新的容器列表，它包含所有不匹配selector的元素。如果参数为collection而非selector，则新的容器列表只包含collection中没有的元素。如果参数为一个函数function，则返回容器值包含遍历元素时function返回"),v("em",[e._v("false")]),e._v("的元素。在function内部，"),v("em",[e._v("this")]),e._v("指向遍历时的当前元素。")]),e._v(" "),v("p",[v("em",[e._v("filter()")]),e._v("方法功能与该函数正好相反。")])]),e._v(" "),v("dt",[e._v("parent, $parent")]),e._v(" "),v("dd",[v("p",[v("code",[e._v("parent()  ⇒ collection"),v("br"),e._v('parent("selector")  ⇒ collection'),v("br"),e._v("$parent(selector)  ⇒ collection")])]),e._v(" "),v("p",[e._v("获取容器中每个元素的直接父元素的列表，如果selector参数被指定，则返回值只包含满足selector的父元素。")])]),e._v(" "),v("dt",[e._v("parents, $parents")]),e._v(" "),v("dd",[v("p",[v("code",[e._v("parents()  ⇒ collection"),v("br"),e._v('parents("selector")  ⇒ collection'),v("br"),e._v("$parents(selector)  ⇒ collection")])]),e._v(" "),v("p",[e._v("获取容器中每个元素的所有祖先元素的列表，如果指定了selector参数，返回结果将会仅包含满足selector的祖先元素。")]),e._v(" "),v("p",[e._v("若要获取直接父元素，请使用"),v("em",[e._v("parent()")]),e._v("。若要获取满足selector的第一祖先元素，请使用"),v("em",[e._v("closest()")]),e._v("。")]),e._v(" "),v("pre",[v("code",[e._v("var all_parents = $('h1').parents();\n")])])]),e._v(" "),v("dt",[e._v("prepend")]),e._v(" "),v("dd",[v("p",[v("code",[e._v("prepend(content)  ⇒ self")])]),e._v(" "),v("p",[e._v("为列表中每个元素预加(相对于附加)内容。"),v("em",[e._v("content")]),e._v("可以是html字符串、DOM元素或元素数组。")]),e._v(" "),v("pre",[v("code",[e._v('q("ul").prepend("<li>New list item</li>");\n')])])]),e._v(" "),v("dt",[e._v("prependTo, $prependTo")]),e._v(" "),v("dd",[v("p",[v("code",[e._v("proependTo(target)  ⇒ self")]),v("br"),v("code",[e._v("$prependTo(selector)  ⇒ self")])]),e._v(" "),v("p",[e._v("将列表中的内容预加(相对于附加)到target目标元素上。类似于"),v("em",[e._v("prepend()")]),e._v("，不过源/目标正好相反。")]),e._v(" "),v("pre",[v("code",[e._v('q("ol>li").prependTo("ul");\n')])])]),e._v(" "),v("dt",[e._v("prev, $prev")]),e._v(" "),v("dd",[v("p",[v("code",[e._v("prev()  ⇒ collection"),v("br"),e._v('prev("selector")  ⇒ collection'),v("br"),e._v("$prev(selector)  ⇒ collection")])]),e._v(" "),v("p",[e._v("获取列表中每个元素的前一个兄弟元素的列表。")]),e._v(" "),v("pre",[v("code",[e._v('var dd = q("dl > dd").prev(); // 所有元素都迁移到前一个dt上。\n')])])]),e._v(" "),v("dt",[e._v("remove")]),e._v(" "),v("dd",[v("p",[v("code",[e._v("remove()  ⇒ self")])]),e._v(" "),v("p",[e._v("将当前容器中的元素从DOM树中它们父元素上解除这些元素的绑定。")])]),e._v(" "),v("dt",[e._v("siblings, $siblings")]),e._v(" "),v("dd",[v("p",[v("code",[e._v("siblings()  ⇒ collection")]),v("br"),v("code",[e._v('siblings("selector")  ⇒ collection')]),v("br"),v("code",[e._v("$siblings(selector)  ⇒ collection")])]),e._v(" "),v("p",[e._v("获取列表中每个元素的后一个兄弟元素的列表。如果selector参数被指定，则值返回匹配的兄弟元素。")])]),e._v(" "),v("dt",[e._v("size")]),e._v(" "),v("dd",[v("p",[v("code",[e._v("size()  ⇒ integer")])]),e._v(" "),v("p",[e._v("报告列表中元素的数量。注意，你可以使用"),v("em",[e._v("length")]),e._v("方法来替代该方法。")])]),e._v(" "),v("dt",[e._v("unwrap")]),e._v(" "),v("dd",[v("p",[v("code",[e._v("unwrap()  ⇒ self")])]),e._v(" "),v("p",[e._v("移除容器中每个元素的直接父元素。")]),e._v(" "),v("pre",[v("code",[e._v('q("body").append("<div id=wrapper><p>Content</p></div>")\nq("#wrapper p").unwrap().parent()  //=> [<body>]\n')])])]),e._v(" "),v("dt",[e._v("wrap")]),e._v(" "),v("dd",[v("p",[v("code",[e._v('wrap("html")  ⇒ self'),v("br"),e._v("wrap(element)  ⇒ self"),v("br"),e._v("wrap(function(index){ ... })  ⇒ self")])]),e._v(" "),v("p",[e._v("封装容器中的每个元素到一个DOM结构中。html参数可以包含一个或多个元素。如果提供了function参数，则该方法会为每个元素调用function函数，并且返回html或元素的引用。")]),e._v(" "),v("pre",[v("code",[e._v('// 封装.buttons中的每个<a>元素到span中:\nq(".buttons a").wrap("<span/>");\n// 封装每个code块到一个div和pre中:\nq("code").wrap("<div class=code><pre></pre></div>");\n// 封装所有input到一个span中，该span的class名称对应input的类型:\nq("input").wrap( :: "<span class=" + this.attributes["type"] + "-field />" );\n//=> <span class=text-field><input type=text /></span>,\n//   <span class=search-field><input type=search /></span>\n')])])]),e._v(" "),v("h2",[e._v("事件")]),e._v("\n\t支持的标志事件列表:\n    "),v("ul",[v("li",[e._v("click, dblclick,")]),e._v(" "),v("li",[e._v("mousedown, mouseenter, mouseleave, mousemove, mouseout, mouseover, mouseup,")]),e._v(" "),v("li",[e._v("focusout, focusin, blur, focus,")]),e._v(" "),v("li",[e._v("keydown, keypress, keyup,")]),e._v(" "),v("li",[e._v("scroll, change, submit, reset,")])]),e._v(" "),v("p",[e._v("Sciter特有事件列表:")]),e._v(" "),v("ul",[v("li",[e._v("expanded, collapsed")])]),e._v(" "),v("p",[e._v('事件类型可以使用"event.namespace"语句将其包含在某个名称空间中，请阅读jQuery文档中的'),v("a",{attrs:{href:"http://docs.jquery.com/Namespaced_Events",title:"Namespaced Events",target:"_blank"}},[e._v("Namespaced Events")]),e._v("章节。")]),e._v(" "),v("p",[e._v('支持自定义事件: 你可以订阅一些如"dosomething.mylib"的事件，并且在你的代码里使用trigger()来触发它。')]),e._v(" "),v("dt",[e._v("on, Element.on")]),e._v(" "),v("dd",[v("code",[e._v("on(type, [selector], function(event){ ... })  ⇒ self"),v("br"),e._v("on({ type: handler, type2: handler2, ... }, [selector])  ⇒ self")]),e._v(" "),v("p",[e._v("添加事件处理器到列表中的所有元素。多个事件类型名称可以通过空格符来分隔，或者作为一个对象——它的键为事件类型，而值是事件处理器。如果指定了selector参数，则只有满足selector的元素的事件才会响应。")]),e._v(" "),v("p",[e._v("事件处理器在附加了处理器并且满足selector选择器(如果指定了selector)的元素的上下文上执行。")]),e._v(" "),v("p",{staticClass:"note"},[e._v("注意 #1: 当事件处理器返回"),v("em",[e._v("false")]),e._v('，则意味着事件被"处理"，这时将会终止事件继续传播。这一点与Sciter中的事件不一样，在Sciter中，事件被"处理"时是'),v("code",[e._v("return true;")]),e._v("。")]),e._v(" "),v("p",{staticClass:"note"},[e._v("注意 #2: 在Sciter中，传递给事件处理器的参数是一个Event(事件)对象。")]),e._v(" "),v("pre",[v("code",[e._v('var elem = q("#content");\n// 观察#content中的所有点击事件:\nelem.on("click", function(e){ ... });\n// 观察#content中的所有导航链接的点击事件\nelem.on("click", "nav a", function(e){ ... });\n// 观察文档中的所有导航链接的点击事件\nself.on("click", "a", function(e){ ... });\n')])])]),e._v(" "),v("dt",[e._v("off, Element.off")]),e._v(" "),v("dd",[v("code",[e._v("off(type, [selector], function(e){ ... })  ⇒ self"),v("br"),e._v("off({ type: handler, type2: handler2, ... }, [selector])  ⇒ self"),v("br"),e._v("off(type, [selector])  ⇒ self"),v("br"),e._v("off()  ⇒ self")]),e._v(" "),v("p",[e._v("解除使用on()方法绑定的事件处理器。若要解除一个指定的事件处理器，function参数必须与传递给on()方法的函数相同。否则，调用该方法将或解除所有type类型的事件处理器。若要解除一个名称空间中的所有事件，请使用"),v("code",[e._v('off(".mylib");')]),e._v("-——没有事件类型名称，只有名称空间。当调用该方法没有传递参数时，它将解除所有注册到当前元素列表上的事件处理器。")]),e._v(" "),v("pre",[v("code",[e._v('var elem = q("#content");\n// 解除#content中的所有点击事件处理器:\nelem.off("click");\n// 解除.mylib名称空间中的所有事件处理器:\nelem.off(".mylib");\n')])])]),e._v(" "),v("dt",[e._v("one, Element.one")]),e._v(" "),v("dd",[v("code",[e._v("one(type, [selector], function(event){ ... })  ⇒ self"),v("br"),e._v("one({ type: handler, type2: handler2, ... }, [selector])  ⇒ self")]),e._v(" "),v("p",[e._v("该方法类似于on()，它绑定的事件处理器在执行一次后会自动解除绑定。")])]),e._v(" "),v("dt",[e._v("trigger, Element.trigger")]),e._v(" "),v("dd",[v("code",[e._v("trigger(event[, param1, param2,...])  ⇒ true/false")]),e._v(" "),v("p",[e._v("触发元素列表上的指定事件。Event这里是一个字符串，它包含事件名称，可以有名称空间。")]),e._v(" "),v("p",[e._v("如果指定了其他参数，则这些参数将会被传递到事件处理器函数中第一个以后的参数。")]),e._v(" "),v("p",[e._v('如果有一个事件处理器"处理"了该事件，该方法将返回'),v("em",[e._v("true")]),e._v("，否则返回"),v("em",[e._v("false")]),e._v("。")]),e._v(" "),v("pre",[v("code",[e._v('// 订阅自定义事件:\nq("#content").on("show-alert.myapp", function(evt,msg) { view.msgbox(#alert,msg) } );\n// 调用自定义事件，并且传递额外的参数:\nq("#content > a").trigger("show-alert.myapp", "Red alert!");\n// 注意：这个事件将会冒泡到容器元素上。\n')])])])]),e._v(" "),v("p",{staticClass:"note"},[e._v("注意: q.tis模块也会添加on()、off()、one()、trigger()方法到Element类上，以便有统一的事件处理。")])])}),[],!1,null,null,null);t.default=o.exports}}]);