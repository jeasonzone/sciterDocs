(window.webpackJsonp=window.webpackJsonp||[]).push([[80],{368:function(e,t,n){"use strict";n.r(t);var s=n(28),l=Object(s.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"angularjs使用者的sciter指南"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#angularjs使用者的sciter指南"}},[e._v("#")]),e._v(" AngularJS使用者的Sciter指南")]),e._v(" "),n("h1",{staticClass:"article-title"},[e._v("AngularJS使用者的Sciter指南：指令(Directive)")]),e._v(" "),n("h2",[e._v("AngularJS")]),e._v(" "),n("h3",[e._v("指令(Directive)")]),e._v(" "),n("p",[e._v("来自"),n("a",{attrs:{href:"https://docs.angularjs.org/guide/directive"}},[e._v("AngularJS文档")]),e._v(" :")]),e._v(" "),n("blockquote",[n("p",[e._v("在高层次上, 指令是DOM元素上的一个标记(比如一个属性、元素名、注释或CSS类), 它指示AngularJS的HTML编译器($compile)以在该DOM元素上添加特定的行为(比如事件监听器), 或改变DOM元素和它的子元素。")])]),e._v(" "),n("p",[e._v("下面是一个典型的AngularJS指令的实现:")]),e._v(" "),n("pre",[n("code",[e._v("app.directive('myCustomer', function() {\n  return {\n    template: 'Name: "+e._s(e.name)+" Address: "+e._s(e.address)+"', // 内容\n    scope: { name:\"\", address:\"\" },  // 内部数据模型\n    link: function(scope, elem, attrs) { // 初始化 \n      elem.bind('click', function() { ... });\n      elem.bind('dblclick', function() { ... });\n    }\n  };\n});")])]),e._v(" "),n("p",[e._v("它的含义是：每个"),n("code",[e._v("<my-customer>")]),e._v("元素都将拥有")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("Name: ... Address: ...")]),e._v(" 内容;")]),e._v(" "),n("li",[n("i",[e._v("click")]),e._v(" 和 "),n("i",[e._v("dblclick")]),e._v(" 事件处理器。")])]),e._v(" "),n("h2",[e._v("Sciter")]),e._v(" "),n("h3",[e._v("行为(Behavior)")]),e._v(" "),n("p",[e._v("在Sciter中，声明从代码到元素的绑定是通过CSS中的"),n("code",[e._v("prototype")]),e._v("属性来完成的:")]),e._v(" "),n("pre",[n("code",[e._v("my-customer {\n  prototype: MyCustomer url(my-customer.tis);\n  display: block;\n  ...\n}")])]),e._v(" "),n("p",[e._v("有了上面的声明后，在HTML文本中的所有"),n("code",[e._v("<my-customer>")]),e._v("元素都将渲染成块元素，并且将"),n("i",[e._v("MyCustomer")]),e._v("类绑定到元素上。这个类将从"),n("i",[e._v("my-customer.tis")]),e._v("文件中加载(如果它尚未加载的话):")]),e._v(" "),n("pre",[n("code",[e._v("class MyCustomer : Element \n{\n  function attached() // 当元素绑定到这个类时被调用 - 相当于Angular中的\"link\"\n  {\n     // 内容初始化: \n     this.$content(Name: <output.name/> Address: <output.address/>);\n  }\n  // 事件处理器:\n  event click { ... /* 这里的'this'指绑定的dom元素 */ }\n  event dblclick { ... }\n}")])]),e._v(" "),n("p",[e._v("因为行为是通过CSS赋值的，所以你可以使用任意的CSS选择器来将类绑定到DOM元素上。")]),e._v(" "),n("h3",[e._v("切面(Aspect)")]),e._v(" "),n("p",[e._v("另一种绑定代码到元素上的方式是使用所谓的切面(aspect). 切面(Aspect)在这里是一个脚本函数，它在CSS选择器第一次匹配到元素时被执行:")]),e._v(" "),n("pre",[n("code",[e._v("[collapsible] { aspect: Collapsible url(my-aspects.tis); }\n[collapsible]:collapsed > :last-child { display:none; } // 当折叠后，最后一个子元素将不可见")])]),e._v(" "),n("p",[e._v("其中，"),n("i",[e._v("Collapsible")]),e._v("是一个普通的函数，它处理元素的点击事件以及触发"),n("code",[e._v(":collapsed")]),e._v("状态标志的切换:")]),e._v(" "),n("pre",[n("code",[e._v("function Collapsible() { \n  this << event click {\n     if( this.state.collapsed ) this.state.expanded = true;\n     else this.state.collapsed = true;    \n  }\n}")])]),e._v(" "),n("p",[e._v("有了上面的声明后，我们可以定义可折叠的元素:")]),e._v(" "),n("pre",[n("code",[e._v("<div collapsible>\n  click here to see content\n  <p>Content</p>\n</div>")])]),e._v(" "),n("p",[e._v("这样你就可以在你的代码中可以有多个可折叠节，而你仅需要在它之上添加“collapsible”属性即可。")])])}),[],!1,null,null,null);t.default=l.exports}}]);